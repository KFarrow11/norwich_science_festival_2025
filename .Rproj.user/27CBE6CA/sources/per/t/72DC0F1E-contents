library(tidyverse)

# assigning objects ----
name <- "emily"
age <- 16 + 19 
today <- Sys.Date()
new_year <- as.Date("2022-01-01")
data <- rnorm(n = 10, mean = 15, sd = 3)

help("rnorm")

age + 10
new_year - today
mean(data)

decade <- age + 10
decade # 45

# vectors ----
numeric_vector <- c(1,2,3)
character_vector <- c("fruits", "vegetables", "seeds")
logical_vector <- c(TRUE, TRUE, FALSE)

# tibbles ----
# make some variables/ vectors
person <- c("Mark", "Phil", "Becky", "Tony")
hobby <- c("kickboxing", "coding", "dog walking", "car boot sales")
awesomeness <- c(1,100,1,1) # cheeky 

# make a tibble
my_data <- tibble(person, hobby, awesomeness)
my_data

# pivot ----
country <- c("x", "y", "z")
yr1960 <-  c(10, 20, 30)
yr1970 <-  c(13, 23, 33)
yr2010 <-  c(15, 25, 35)

country_data <- tibble(country, yr1960, yr1970, yr2010)
country_data

pivot_longer(data = country_data, # make into a suitable format for plotting and further analysis 
             cols = yr1960:yr2010,
             names_to = "year",
             names_prefix = "yr",
             values_to = "metric")

country_data <- pivot_longer(data = country_data, # save to country_data
                             cols = yr1960:yr2010,
                             names_to = "year",
                             names_prefix = "yr",
                             values_to = "metric")

long_country_data <- pivot_longer(data = country_data, # save to long_contry data
                                  cols = yr1960:yr2010,
                                  names_to = "year",
                                  names_prefix = "yr",
                                  values_to = "metric")

# Referencing ----
citation() # Citing R 
citation("tidyverse") # Citing packages
RStudio.Version() # Current version of R in my workspace

# 🐧🐧 MEET THE PENGUINS 🐧🐧 ----
# Packages should be placed at top of scripts
library(janitor) # cleans variable names
library(lubridate) # ensures proper date processing

# INFO ----
#An analysis of the bill dimensions of male and female Adelie, Gentoo and Chinstrap penguins

# Data first published in  Gorman, KB, TD Williams, and WR Fraser. 2014. “Ecological Sexual Dimorphism and Environmental Variability Within a Community of Antarctic Penguins (Genus Pygoscelis).” PLos One 9 (3): e90081. https://doi.org/10.1371/journal.pone.0090081.
#__________________________----

# IMPORT DATA 🐧 ----
library(readr)
penguins_raw <- read_csv("C:/Users/Katie/Desktop/R_files/masters/bioinformatics/bioinformatics_intro/data/penguins_raw.csv")
penguins <- penguins_raw

head(penguins) # check the data has loaded, prints first 10 rows of dataframe
glimpse(penguins)

#__________________________----
# CHECK DATA 🐧----
# check the data column names = untidy format
colnames(penguins)

#__________________________----
# CLEAN DATA 🐧 ----
# clean all variable names to snake_case using the clean_names function from the janitor package
# note we are using assign <- to overwrite the old version of penguins with a version that has updated names
# this changes the data in our R workspace but NOT the original csv file

penguins <- janitor::clean_names(penguins) # clean the column names

colnames(penguins) # quickly check the new variable names

# shorten the variable names for N and C isotope blood samples

penguins <-rename(penguins,
                  "delta_15n"="delta_15_n_o_oo",  # use rename from the dplyr package
                  "delta_13c"="delta_13_c_o_oo")

# use mutate and case_when for a statement that conditionally changes the names of the values in a variable
penguins <- penguins %>%
  mutate(species =case_when(species == "Adelie Penguin (Pygoscelis adeliae)" ~ "Adelie",
                            species == "Gentoo penguin (Pygoscelis papua)" ~ "Gentoo",
                            species == "Chinstrap penguin (Pygoscelis antarctica)" ~ "Chinstrap"))
#__________________________----
# DPLYR VERBS 🐧 ----

select(.data = penguins, # the data object
       species, sex, flipper_length_mm, body_mass_g) # the variables you want to select

new_penguins <- select(.data = penguins, 
                       species, sex, flipper_length_mm, body_mass_g) #assign tibble to new_penguins object

filter(.data = new_penguins, species == "Adelie") # A == B	equivalence

# Only bservations of Adelie penguins where flipper length was measured as greater than 190mm.
filter(.data = new_penguins, species == "Adelie", flipper_length_mm > 190)

# sorts the rows in the table according to the columns supplied
arrange(.data = new_penguins, sex)
arrange(.data = new_penguins, # sort multiple columns
        sex,
        desc(species),
        desc(flipper_length_mm))

# mutating a new column and attaching it to the new_penguins data object.
new_penguins <- mutate(.data = new_penguins,
                       body_mass_kg = body_mass_g/1000)

view(new_penguins) # check new column was added

# Data summaries ----
summarise(
  .data = penguins,     # The dataset to summarize
  total = n(),          # Calculate the total number of rows
  mean = mean(body_mass_g, na.rm = TRUE)  # Calculate the mean of 'body_mass_g', ignoring NA values
)

# grouping calculations
group_penguins <- group_by(penguins, species) # subsequent functions are perform "by group"

summarise(
  .data = group_penguins,     # The dataset to summarize
  total = n(),          # Calculate the total number of rows
  mean = mean(body_mass_g, na.rm = TRUE)  # Calculate the mean of 'body_mass_g', ignoring NA values
)

# PIPINIG %>% ----
# this example is human readable without intermediate objects
penguins %>%  # Take the penguins data 
  select(species, sex, flipper_length_mm) %>% # Select only the species, sex and flipper length columns
  filter(sex == "MALE") %>% # Filter to keep only those observations labelled as sex equals male 
  arrange(desc(flipper_length_mm)) # Arrange the data from HIGHEST to LOWEST flipper lengths.

# Using pipes to group and summarise
penguins %>% 
  group_by(species) %>% 
  summarise(total = n(),    
            mean = mean(body_mass_g, na.rm = TRUE))

# Checking for duplicate rows in the data ----
penguins %>% 
  duplicated() %>% # produces a list of TRUE/FALSE statements for duplicated or not
  sum() # sums all the TRUE statements

# my addition - use summarise to make calculations
penguins %>% 
  summarise(min=min(body_mass_g, na.rm=TRUE), 
            max=max(body_mass_g, na.rm=TRUE))
penguins %>% 
  group_by(species) %>%  # group by species
  summarise(min=min(body_mass_g, na.rm=TRUE), 
            max=max(body_mass_g, na.rm=TRUE))

# Distinct function for checking mistyped values
penguins %>% 
  distinct(sex) 

# Get a sum of how many observations are missing in our dataframe
penguins %>% 
  is.na() %>% 
  sum()

# produce a summary of our data
summary(penguins)

#__________________________----
# SUMMARISE ----
penguins %>% 
  summarise(n_distinct(individual_id)) # number of distinct penguins

penguins %>% 
  group_by(species, sex) %>% 
  summarise(n_distinct(individual_id))# grouped output by 'species'


# min and max to calculate minimum and maximum values of a numeric vector
# mean and median to calculate averages of a numeric vector
# sd and var calculate standard deviation and variance of a numeric vector

# calculate the mean flipper and bill lengths of our penguins
penguins %>% 
  summarise(
    mean_flipper_length = mean(flipper_length_mm, na.rm=TRUE),
    mean_culmen_length = mean(culmen_length_mm, na.rm=TRUE))
# mean_flipper_length 201
# mean_culmen_length 43.9

# Group summarise - generate further insights
penguins %>% 
  summarise(n=n(), # number of rows of data
            num_penguins = n_distinct(individual_id), # number of unique individuals
            mean_flipper_length = mean(flipper_length_mm, na.rm=TRUE), # mean flipper length
            prop_female = sum(sex == "FEMALE", na.rm=TRUE) / n()) # proportion of observations that are coded as female

#There are 190 unique IDs and 344 total observations so it would appear that there are roughly twice as many observations as unique individuals. The sex ratio is roughly even (48% female) and the average flipper length is 201 mm.

# Across ----
# The mean of ALL numeric columns in the data, where(is.numeric == TRUE) hunts for numeric columns
penguins %>% 
  summarise(across(.cols = where(is.numeric),
                   .fns = ~ mean(., na.rm=TRUE)))

# number of distinct penguins, as only one column contains the word penguin
# the argument contains looks for columns that match a character expression
penguins %>% 
  summarise(across(.cols = contains("individual"), 
                   .fns = ~n_distinct(.)))

# by grouping on the individual penguin ids, then summarising by n - we can see how many times each penguin🐧 was monitored in the course of this study.
penguin_stats <- penguins %>% 
  group_by(individual_id) %>% 
  summarise(num=n())

# more than 1 grouping variable
penguins_grouped <- penguins %>% 
  group_by(sex, species)

# calculate the mean flipper length of penguins 🐧 in each of the six combinations
penguins_grouped %>%
  summarise(mean_flipper =mean(flipper_length_mm, na.rm=TRUE))

# Using mutate and group_by ----
centered_penguins <- penguins %>% 
  group_by(sex, species) %>% 
  mutate(flipper_centered = flipper_length_mm-mean(flipper_length_mm, na.rm=TRUE))

centered_penguins %>% 
  select(flipper_centered)
# Each row now returns a value for EACH penguin of how much greater/lesser than the group average (sex and species) its flipper is. 

# remove group_by 
centered_penguins <- centered_penguins %>% 
  ungroup()

centered_penguins

#__________________________----
# DATES ----
penguins %>%
  mutate(date_egg = str_remove_all(date_egg, "/"))

# add the as.numeric() function
penguins %>%
  mutate(date_egg =as.numeric(str_remove_all(date_egg, "/"))) %>%
  glimpse()
# date_egg <dbl> 11112007, 11112007, 16112007, 16112007…

penguins <- penguins %>%
  mutate(date_egg_proper = lubridate::dmy(date_egg))

penguins %>%
  summarise(min_date=min(date_egg_proper),
            max_date=max(date_egg_proper))

# NUMBER OF OBSERVATIONS - my addition ----
# how many times was each penguin measured, and across what total time period?
penguins %>%
  group_by(individual_id) %>%
  summarise(first_observation=min(date_egg_proper),
            last_observation=max(date_egg_proper),
            study_duration_years = (last_observation-first_observation)/lubridate::dyears(1),
            n=n()) %>%
  arrange(desc(study_duration_years))

# Factors ----
penguins <- penguins %>%
  mutate(flipper_range =case_when(flipper_length_mm <= 190 ~ "small",
                                  flipper_length_mm >190 & flipper_length_mm < 213 ~ "medium",
                                  flipper_length_mm >= 213 ~ "large"))

# making a bar plot to visualise previous code chunk
penguins %>%
  ggplot(aes(x = flipper_range))+
  geom_bar(aes(fill = "black"))

# convert the column flipper_range from class character to class factor.
penguins <- penguins %>%
  mutate(flipper_range = fct_relevel(flipper_range, "small", "medium", "large"))

# plot 
penguins %>%
  ggplot(aes(x = flipper_range))+
  geom_bar(aes(fill = "black"))

# Automated data exploration with skim()
library(skimr)
skimr::skim(penguins) # data quality check

# _____________________________________________________________----
# for the purpose of submission, normally data visualisation script is 02_visualisation_penguins.R and in order to fetch cleaning script would normally run this. 
source("scripts/01_import_penguins_data.R")
# However as I am combining both for submission, this is not required
#_______________________________________________________________----

# LOAD R OBJECTS AND FUNCTIONS ----
source("scripts/01_import_penguins_data.R")
# import tidied penguins data and functions
#__________________________----

# DATA VISULISATION - MY FAVORITE TOPIC ----
# Building a ggplot step by step ----
## Render a plot background ----
penguins %>% 
  ggplot() # produce an empty grey panel

ggplot(data = penguins) # produce an empty grey panel

## Set axes ----
penguins %>% 
  ggplot(aes(x=flipper_length_mm, 
             y = body_mass_g))

## Add a geom ----
penguins %>% 
  ggplot(aes(x=flipper_length_mm, 
             y = body_mass_g))+
  layer(                # layer inherits data and aesthetic arguments from previous
    geom="point",       # draw point objects
    stat="identity",    # each individual data point gets a geom (no summaries)
    position=position_identity()) # data points are not moved in any way e.g. we could specify jitter or dodge if we want to avoid busy overlapping data

# simple version
penguins %>% 
  ggplot(aes(x=flipper_length_mm, 
             y = body_mass_g))+
  geom_point(colour="red")
# geom_point function will always draw points, and unless specified otherwise the arguments for position and stat are both "identity".
# adding color to points

penguins %>% 
  ggplot(aes(x=flipper_length_mm, 
             y = body_mass_g))+
  geom_point(aes(colour=species)) 
# to modify an aethetic according to a variable in your data THEN it DOES go inside aes() e.g. aes(color = species)

## Add a second geom ----
penguins %>% 
  ggplot(aes(x=flipper_length_mm, 
             y = body_mass_g))+
  geom_point(aes(colour=species))+ 
  geom_smooth(method="lm",    #add another layer of data representation.
              se=FALSE,
              aes(colour=species)) # note layers inherit information from the top ggplot() function but not previous layers - if we want separate lines per species we need to either specify this again *or* move the color aesthetic to the top layer. 

# simplified version of above
penguins %>% 
  ggplot(aes(x=flipper_length_mm, 
             y = body_mass_g,
             colour=species))+ ### now colour is set here it will be inherited by ALL layers
  geom_point() +
  geom_smooth(method="lm",    #add another layer of data representation.
              se=FALSE)

## Set axis limits ----
penguins %>% 
  ggplot(aes(x=flipper_length_mm, 
             y = body_mass_g,
             colour=species))+ 
  geom_point()+
  geom_smooth(method="lm",    
              se=FALSE)+
  xlim(0,240) + ylim(0,7000)

penguins %>% 
  ggplot(aes(x=flipper_length_mm, 
             y = body_mass_g,
             colour=species))+ 
  geom_point()+
  geom_smooth(method="lm",    
              se=FALSE)+
  xlim(0,240) + ylim(0,7000)+
  coord_flip()

## Custom labels ----
penguins %>% 
  ggplot(aes(x=flipper_length_mm, 
             y = body_mass_g,
             colour=species))+ 
  geom_point()+
  geom_smooth(method="lm",    
              se=FALSE)+
  labs(x = "Flipper length (mm)", # x.axis title
       y = "Body mass (g)", # y.axis title
       title= "Penguin Size, Palmer Station LTER", # title
       subtitle= "Flipper length and body mass for three penguin species") # subtitle


## Custom themes ----
penguins %>% 
  ggplot(aes(x=flipper_length_mm, 
             y = body_mass_g,
             colour=species))+ 
  geom_point()+
  geom_smooth(method="lm",    
              se=FALSE)+
  labs(x = "Flipper length (mm)",
       y = "Body mass (g)",
       title= "Penguin Size, Palmer Station LTER",
       subtitle= "Flipper length and body mass for three penguin species")+
  theme_classic() # my personal preference

penguins %>% 
  ggplot(aes(x=flipper_length_mm, 
             y = body_mass_g,
             colour=species))+ 
  geom_point()+
  geom_smooth(method="lm",    
              se=FALSE)+
  labs(x = "Flipper length (mm)",
       y = "Body mass (g)",
       title= "Penguin Size, Palmer Station LTER",
       subtitle= "Flipper length and body mass for three penguin species")+
  theme_minimal() 


penguins %>% 
  ggplot(aes(x=flipper_length_mm, 
             y = body_mass_g,
             colour=species))+ 
  geom_point()+
  geom_smooth(method="lm",    
              se=FALSE)+
  labs(x = "Flipper length (mm)",
       y = "Body mass (g)",
       title= "Penguin Size, Palmer Station LTER",
       subtitle= "Flipper length and body mass for three penguin species")+
  theme_void() 


# GEOMS
## geom point
ggplot(data = penguins, aes(x = species, y = culmen_length_mm)) +
  geom_point(aes(color = species),
             alpha = 0.7, 
             show.legend = FALSE) 

# jitter
ggplot(data = penguins, aes(x = species, y = culmen_length_mm)) +
  geom_jitter(aes(color = species),
              width = 0.1, # specifies the width, change this to change the range of scatter
              alpha = 0.7, # specifies the amount of transparency in the points
              show.legend = FALSE) # don't leave a legend in a plot, if it doesn't add value

# boxplot
ggplot(data = penguins,aes(x = species, y = culmen_length_mm)) +
  geom_boxplot(aes(fill = species),
               alpha = 0.7,
               width = 0.5, # change width of boxplot
               show.legend = FALSE)

# boxplot with jitter
ggplot(data = penguins,aes(x = species, y = culmen_length_mm)) +
  geom_boxplot(aes(fill = species), # note fill is "inside" colour and colour is "edges" - try it for yourself
               alpha = 0.2, # fainter boxes so the points "pop"
               width = 0.5, # change width of boxplot
               outlier.shape=NA)+
  geom_jitter(aes(colour = species),
              width=0.2)+
  theme(legend.position = "none")

##Density and histograms ----
penguins %>%
  ggplot(aes(x=culmen_length_mm, fill=species),
         position = "identity")+
  geom_histogram(bins=50) #  struggle to see/understand the difference between the 2 charts. 
# produced a frequency histogram, each bar represents the actual number of observations made within each bin

penguins %>%
  ggplot(aes(x=culmen_length_mm, fill=species))+
  geom_histogram(bins=50,
                 aes(y=..density..),
                 position = "identity") # the 'relative density' within each bin. 

# Results = far fewer Adelie penguins in our dataset, but in a density histogram they occupy the same area of the graph as the other two species
#__________________________----
# ADDING COLORS----
penguins %>%
  ggplot(aes(x=flipper_length_mm)) +
  geom_histogram(bins=50,
                 aes(y=..density..,
                     fill=species),
                 position = "identity",
                 colour="black") + # add black boarder to bars
  theme_classic() +
  labs(x = "Flipper Length (mm)",
       title= "Flipper Length Distribution among Penguin Species",
       subtitle= "A comparative analysis of flipper lengths in Adelie, Chinstrap, and Gentoo penguins at Palmer Station LTER")

# OUTPUT FIGURE TO FILE
ggsave("outputs/2025_02_08_penguin_plot.png", dpi=400)

## Custom colors ----
# for more colour options, look on Canva colours for codes
penguin_colours <-c("darkolivegreen4", "darkorchid3", "goldenrod1")

penguins %>%
  ggplot(aes(x=flipper_length_mm,
             y = body_mass_g))+
  geom_point(aes(colour=species))+
  scale_color_manual(values=penguin_colours)+
  theme_minimal()

penguins %>% 
  ggplot(aes(x=flipper_length_mm, 
             y = body_mass_g))+
  geom_point(aes(colour=species))+
  scale_color_brewer(palette="Set1")+
  theme_minimal()

## Check accessibility for colour blindness ----
library(colorBlindness)
colorBlindness::cvdPlot() # will automatically run on the last plot you made

## multiple plots = Facetting ----
penguins %>%
  drop_na(sex) %>%
  ggplot(aes(x=flipper_length_mm,
             y = body_mass_g,
             colour=species))+
  geom_point()+
  geom_smooth(method="lm",
              se=FALSE)+
  facet_wrap(~sex)+
  theme_classic()

# OUTPUT FIGURE TO FILE
ggsave("outputs/2025_02_08_facetwrap_plot.png", dpi=400)

## Patchwork ----
library(patchwork) # patching multiple plots on 1 screen 

p1 <- penguins %>%
  ggplot(aes(x=flipper_length_mm,
             y = culmen_length_mm))+
  geom_point(aes(colour=species))+
  scale_color_manual(values=penguin_colours)+
  theme_minimal()

p2 <- penguins %>%
  ggplot(aes(x=culmen_depth_mm,
             y = culmen_length_mm))+
  geom_point(aes(colour=species))+
  scale_color_manual(values=penguin_colours)+
  theme_minimal()

p3 <- penguins %>%
  group_by(sex,species) %>%
  summarise(n=n()) %>%
  drop_na(sex) %>%
  ggplot(aes(x=species, y=n)) +
  geom_col(aes(fill=sex),
           width=0.8,
           position=position_dodge(width=0.9),
           alpha=0.6)+
  scale_fill_manual(values=c("darkorange1", "azure4"))+
  theme_classic()

(p1+p2)/p3+
  plot_layout(guides = "collect")

# OUTPUT FIGURE TO FILE
ggsave("outputs/2025_02_08_patchwork_plot.png", dpi=400)

# Relpicate violin plot
pal <-c("darkorange1", "darkorchid3", "turquoise4")

penguins %>%
  ggplot(aes(x = species,
             y = body_mass_g,
             fill = species,
             colour = species))+
  geom_violin(alpha = 0.2)+
  geom_boxplot(width = 0.2,
               alpha = 0.5)+
  scale_fill_manual(values = pal)+
  scale_colour_manual(values = pal)+
  theme_classic()+
  theme(legend.position = "none")+
  labs(
    x = "",
    y = "Body mass (g)",
    title = "Body mass of brush-tailed penguins",
    subtitle = "Box and violin plot of body mass by species")

# OUTPUT FIGURE TO FILE
ggsave("outputs/2025_02_08_ggplot_workshop_final_plot.png", dpi=400)

# Reference ----
RStudio.Version() # Current version of R in my workspace
citation() # Citing R 
citation("tidyverse", "readr", "janitor", "lubridate", "skimr", "colorBlindness", "patchwork") # Citing packages

# GITHUB ----
  https://github.com/KFarrow11 
