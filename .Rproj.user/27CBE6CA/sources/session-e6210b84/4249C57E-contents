# OUTLINE ----
# Associating genotypes with phenotypes
# -----------------------------------------
# Which genetic variants affect traits?
# Associations between traits and variants
# x = position of genome, strong = high score = pvalue
# manhatten plot

# PACKAGES ----
library(tidyverse)

# LOAD DATA ----
genotypes<-read_tsv("data/GWAS_data/Chr12_Genotypes.tsv")
map<-read_tsv("data/GWAS_data/Chr12_Map.tsv")
phenotypes<-read_tsv("data/GWAS_data/Phenotype_Height.tsv")

# VIEW ----
## genotypes ----
colnames(genotypes)
nrow(genotypes) # rows = genotypes
ncol(genotypes) # column = Allele
head(genotypes)
view(genotypes)

## map ----
colnames(map)
nrow(map)
ncol(map)
head(map)
view(map)

## phenotype ----
colnames(phenotypes)
nrow(phenotypes)
ncol(phenotypes)
head(phenotypes)
view(phenotypes)

pheno_hist1 <- phenotypes %>%
  ggplot(aes(x = Height)) +
  geom_histogram()+
  theme_classic()

pheno_hist1

# What is the allele frequency? ----
# row 1000
locus1000 <- genotypes[1000,]
locus1000
one_geno <- as.numeric(locus1000) # long version

one_geno <- as.numeric(genotypes[1000,]) # short version
one_geno

mean(one_geno, na.rm=TRUE)/2 # 0.192

# Allele frequency across all loci ----
# v <- apply(df, all rows = 1/ all columns = 2, mean, na.rm=TRUE)/2
allele_freq <- apply(genotypes, 1, mean, na.rm=TRUE)/2 
allele_freq 

#Have to convert to a table before plotting with ggplot
plot_freq = tibble(allele_freq)
plot_freq

# histogram  
allele_freq_hist <-  plot_freq %>%
  ggplot(aes(x= allele_freq)) +
  geom_histogram(binwidth = 0.01)+
  theme_classic()

allele_freq_hist

#  Plot the association between one genotype and the phenotype ----
phenotypes$one_geno = as.numeric(one_geno)

head(phenotypes)

g_p_plot <- phenotypes %>%
  ggplot(aes(x=one_geno, y=Height)) +
  geom_jitter(width = 0.2) +
  geom_smooth(method = lm) +
  theme_classic()

g_p_plot  

# Statistical association between one genotype and the phenotype ----
corTestResult = cor.test(phenotypes$Height, phenotypes$one_geno) # perform correlation test

corTestResult$p.value # extract p value = 0.64

# Repeat association test across all genotypes ----
association_test = function(geno, pheno){
  one_geno <- as.numeric(geno)
  corTestResult = cor.test(pheno, one_geno) # perform correlation test
  corTestResult$p.value # extract p value
}

ass_test <- apply(genotypes, 1, association_test , pheno=phenotypes$Height)
ass_test

map$pvalues <- ass_test # add p values column to map
head(map)

# plot -log10 p values
ass_plot <-  map %>%
  ggplot(aes(x=Position, y=-log10(pvalues))) + #  Position = chromosome position
           geom_point() +
           geom_hline(aes(yintercept=-log10(0.05)), colour="red") # line at pvalue = -log10(0.05)
         
ass_plot

m <- nrow(genotypes)
m # 1280

# Bonferroni correction for multiple testing
bonferroni_pvalue <- 0.05/m
bonferroni_pvalue # 3.90625e-05   

#  Add the Bonferroni-corrected p-value threshold to your Manhattan plot.
ass_plot2 <-  map %>%
  ggplot(aes(x=Position, y=-log10(pvalues))) +
  geom_point() +
  geom_hline(aes(yintercept=-log10(0.05)), colour="red") + # line at pvalue = -log10(0.05)
  geom_hline(aes(yintercept=-log10(bonferroni_pvalue)), colour="blue")+
  theme_classic()

ass_plot2

# Sarah stop here ----
# Permutation tests for statistical significance ----
get_p_values<-function(genos, pheno){
  apply(genos, 1, association_test , pheno)
}

p = get_p_values(genotypes, phenotypes$Height)
map$p <- p # add pvalue column to map
head(map)

ggplot(map, aes(x=Position, y=-log10(p))) + geom_point()

heights_perm <- sample(phenotypes$Height)
head(heights_perm)

ass_plot3 <-  map %>%
  ggplot(aes(x=Position, y=-log10(p))) +
  geom_point() +
  geom_hline(aes(yintercept=-log10(0.05)), colour="red") + # line at pvalue = -log10(0.05)
  geom_hline(aes(yintercept=-log10(bonferroni_pvalue)), colour="blue")

ass_plot3

# repeat the random sampling using the replicate function
perm = replicate(100, sample(phenotypes$Height))
head(perm) # 100 columns each containing the plant heights randomly shuffled

# apply the get_p_values function to every column to get the results from each of these 100 permutations
p_perms = apply(perm, 2, get_p_values, genos=genotypes)

min(p_perms) # 1.75
max(p_perms) #0.99
mean(p_perms) # 0.05

# smallest p value for each permutation
min_p_perms <- apply(p_perms, 2, min)
head(min_p_perms)

# sort p values for each permutation
sorted_min_p <- sort(min_p_perms)
head(sorted_min_p)

threshold <- 0.001

# Final plot with threshold 
ass_plot4 <-  map %>%
  ggplot(aes(x=Position, y=-log10(p))) +
  geom_point() +
  geom_hline(aes(yintercept=-log10(0.05)), colour="red") + # line at pvalue = -log10(0.05)
  geom_hline(aes(yintercept=-log10(bonferroni_pvalue)), colour="blue")+
  geom_hline(aes(yintercept=threshold), colour="red", linetype="dashed")+
  theme_classic()
  
ass_plot4

