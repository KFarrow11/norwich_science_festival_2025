scale_x_discrete(labels = c(
"Toddler (0-4)", "Young Child (5-8)", "Child (9-12)", "Teen (13-19)",
"Young Adult (20-35)", "Adult (36-60)", "Older Adult (61-70)", "Senior (70+)"
)) +
custom_theme() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
participants_plot
# Packages ----
library(shiny)
library(tidyverse)
library(plotly)
# CODE ----
ui_nsf25_3 <- fluidPage(
# Define custom styles/theme for app page
tags$head(
tags$style(HTML("
body {
background-color: #F0FFFF;  /* Set background color of the body */
font-family: 'Lucida Sans Typewriter', Monaco, monospace;  /* Set font family for the page */
}
.sidebar {
background-color: #FEDE00;  /* Set background color for sidebar */
padding: 20px;  /* Add padding inside the sidebar */
border: 5px solid #000000;  /* Add border to sidebar */
border-radius: 10px;  /* Round corners of the sidebar */
font-size: 20px;  /* Set font size for sidebar text */
font-weight: bold;  /* Make sidebar text bold */
}
.title {
color: #FEDE00;  /* Set text color for title */
font-size: 40px;  /* Set font size for title */
font-weight: bold;  /* Make title bold */
text-align: center;  /* Center-align the title text */
border: 6px solid #E2B808;  /* Add border around the title */
border-radius: 10px;  /* Round corners of the title */
padding: 10px;  /* Add padding inside the title */
background-color: #0A7029;  /* Set background color for the title */
box-shadow: 2px 2px 8px rgba(0,0,0,0.3);  /* Add shadow to the title */
}
h3 {
color: black;  /* Set text color for h3 elements */
font-size: 20px;  /* Set font size for h3 elements */
font-weight: bold;  /* Set text bold */
}
p {
color: black;  /* Set text color for paragraphs */
font-size: 20px;  /* Set font size for paragraphs */
font-weight: bold;  /* Make paragraphs bold */
}
.action-button {
background-color: #0A7029;  /* Set background color for action buttons */
color: white;  /* Set text color for action buttons */
border: 3px solid black;  /* Add border for action buttons */
border-radius: 5px;  /* Round corners of action buttons */
padding: 10px 20px;  /* Add padding inside action buttons */
font-size: 20px;  /* Set font size for action buttons */
font-weight: bold;  /* Set text bold */
}
"))
),
# Title displayed at the top of the app
div(class = "title", HTML("Speedy Skyscrapers<br>Does Age Matter in Tower Building?")), br(),
# Define layout of the page with a sidebar and a main panel
# radioButtons = checkboxes
sidebarLayout(
sidebarPanel(
class = "sidebar",
sliderInput("blocks", "Number of Blocks (HEIGHT)?", min = 1, max = 10, value = 1),
radioButtons("age", "Age",
choices = c("Toddler (0-4)" = "Toddler (0-4)",
"Young Child (5-8)" = "Young Child (5-8)",
"Child (9-12)" = "Child (9-12)",
"Teen (13-19)" = "Teen (13-19)",
"Young Adult (20-35)" = "Young Adult (20-35)",
"Adult (36-60)" = "Adult (36-60)",
"Older Adult (61-70)" = "Older Adult (61-70)",
"Senior (70+)" = "Senior (70+)")),
radioButtons("color", "Favorite Colour",
choices = c("Red" = "#FF0000",
"Yellow" = "#FFD700",
"Pink" = "#FF0080",
"Green" = "#008000",
"Orange" = "#FFA500",
"Purple" = "#800080",
"Blue" = "#0000FF")),
actionButton("add", "Plot Data"),
br(), br(),
),
# Main panel to display the scatter plot
mainPanel(
width = 8,
plotlyOutput("scatterPlot", height = "600px", width = "1200px")
)))
# Server logic to handle user inputs and generate outputs
server <- function(input, output, session) {
# Define the path for saving the inputs as a CSV
tower <- "data/nsf2025_data_collection_1.csv" # Saturday = 191 entries
#tower <- "data/nsf2025_data_collection_1.csv" # Sunday = 212 entries
# Load existing data if it exists
if (file.exists(tower)) {
tower_data <- read.csv(tower)
} else {
tower_data <- data.frame(Age = character(), Blocks = numeric(), Color = character())
}
# Create a reactive dataframe to store user inputs
data <- reactiveVal(tower_data)
# Update the dataframe when the action button is clicked
observeEvent(input$add, {
new_row <- data.frame(Age = input$age, Blocks = input$blocks, Color = input$color, stringsAsFactors = FALSE)
updated_data <- rbind(data(), new_row)
data(updated_data)
# Save updated data to CSV
write.csv(updated_data, tower, row.names = FALSE)
})
# Generate and render the scatter plot when the data changes
output$scatterPlot <- renderPlotly({
# Retrieve the current data
plot_data <- data()
# Define the levels and order for Age
plot_data$Age <- factor(plot_data$Age, levels = c(
"Toddler (0-4)", "Young Child (5-8)", "Child (9-12)", "Teen (13-19)",
"Young Adult (20-35)", "Adult (36-60)", "Older Adult (61-70)", "Senior (70+)"
))
# Create the ggplot scatter plot
p <- ggplot(plot_data, aes(y = Blocks, x = Age, color = Color, text = paste("<br>Age:", Age, "<br>Blocks:", Blocks))) +
geom_point(size = 6, shape = 21, fill = plot_data$Color) + # Add points to the plot with customized size and colour
geom_jitter() +
scale_color_identity() + # Use the exact color values provided (no automatic scaling)
theme_minimal(base_size = 15) + # Apply a minimal theme to the plot
labs(y = "Number of Blocks (HEIGHT)", x = "Age") + # Set labels for axes
scale_y_continuous(limits = c(0, 10), breaks = 0:10) + # Set y-axis limits and breaks
scale_x_discrete(labels = c(
"Toddler (0-4)" = "Toddler",
"Young Child (5-8)" = "YC",
"Child (9-12)" = "Child",
"Teen (13-19)" = "Teen",
"Young Adult (20-35)" = "YA",
"Adult (36-60)" = "Adult",
"Older Adult (61-70)" = "OA",
"Senior (70+)" = "Senior"
)) + # Rename x-axis labels
theme(plot.title = element_text(face = "bold", size = 20, color = "#000000"), # Customize plot title style
axis.title = element_text(face = "bold", size = 16), # Customize axis title style
axis.text.x = element_text(face = "bold"), # Customize x-axis text style
axis.text.y = element_text(face = "bold"), # Customize y-axis text style
legend.position = "none", # Hide legend
panel.background = element_rect(fill = "#F0FFFF"), # Set panel background color
plot.background = element_rect(fill = "#F0FFFF"), # Set overall plot background color
panel.grid.major = element_line(color = "#000000"), # Customize major grid lines
panel.grid.minor = element_line(color = "#000000")) # Customize minor grid lines
# Convert the ggplot to a Plotly object for interactivity and set custom tooltips
ggplotly(p, tooltip = "text") %>%
layout(autosize = TRUE) # Enable autosize
})
}
# Run the Shiny app
shinyApp(ui = ui_nsf25_3, server = server)
library(tidyverse)
library(RColorBrewer) # colour pallets
# SET PLOT SIZINGS ----
# Define your sizes
title <- 20 # title size
subtitle <- 14 # subtitle size
title_size <- 16 # set axis title size
text_size <- 12 # set axis text size
# Custom theme function
custom_theme <- function() {
theme(
legend.position = "none",
plot.title = element_text(size = title, face = "bold", color = "black"),
plot.subtitle = element_text(size = subtitle, face = "bold", color = "black"),
axis.text.x = element_text(size = text_size, face = "bold", color = "black"),     # X-axis text
axis.text.y = element_text(size = text_size, face = "bold", color = "black"),     # Y-axis text
axis.title.x = element_text(size = title_size, face = "bold", color = "black", margin = margin(10, 10, 10, 10)),   # X-axis title
axis.title.y = element_text(size = title_size, face = "bold", color = "black", margin = margin(10, 10, 10, 10)))  # Y-axis title
}
# LOAD DATA ----
nsf25 <- read_csv("data/nsf2025_data_collection_1.csv")
glimpse(nsf25)
summary(nsf25)
nsf25$Age <- factor(nsf25$Age, levels = c(
"Toddler (0-4)", "Young Child (5-8)", "Child (9-12)", "Teen (13-19)",
"Young Adult (20-35)", "Adult (36-60)", "Older Adult (61-70)", "Senior (70+)"
))
age_plot <- nsf25 %>%
ggplot(aes(x=Age, y=Blocks)) +
geom_jitter() +
theme_classic()
age_plot <- nsf25 %>%
ggplot(aes(x = Age, y = Blocks, colour = Color)) +
geom_jitter(width = 0.35, size = 4) +
scale_color_identity() + # Use the exact color values provided (no automatic scaling)
theme_bw() +
labs(
title = "Norwich Science Festival 2025 Speedy Skyscrapers",
subtitle = "Performance of Participants in Building a 10-Block Tower Within 30 Seconds",
y = "Height (Number of blocks) after 30 seconds",
x = "Age group",
caption = "Performance of participants in constructing a 10-block tower within a 30-second interval (n=402).
Each colour denotes a participant's selected favorite color from the following options: red, yellow, pink, green, orange, purple, and blue."
) + # Set labels for axes and add figure legend
theme(
plot.caption = element_text(hjust = 0, vjust = 1, size = text_size) # Align caption to the bottom left
) +
scale_y_continuous(limits = c(0, 10.5), breaks = 0:10.5) + # Set y-axis limits and breaks
scale_x_discrete(labels = c(
"Toddler (0-4)", "Young Child (5-8)", "Child (9-12)", "Teen (13-19)",
"Young Adult (20-35)", "Adult (36-60)", "Older Adult (61-70)", "Senior (70+)"
)) +
custom_theme()
age_plot
library(shiny)
library(tidyverse)
library(plotly)
# CODE ----
ui_nsf25_3 <- fluidPage(
# Define custom styles/theme for app page
tags$head(
tags$style(HTML("
body {
background-color: #F0FFFF;  /* Set background color of the body */
font-family: 'Lucida Sans Typewriter', Monaco, monospace;  /* Set font family for the page */
}
.sidebar {
background-color: #FEDE00;  /* Set background color for sidebar */
padding: 20px;  /* Add padding inside the sidebar */
border: 5px solid #000000;  /* Add border to sidebar */
border-radius: 10px;  /* Round corners of the sidebar */
font-size: 20px;  /* Set font size for sidebar text */
font-weight: bold;  /* Make sidebar text bold */
}
.title {
color: #FEDE00;  /* Set text color for title */
font-size: 40px;  /* Set font size for title */
font-weight: bold;  /* Make title bold */
text-align: center;  /* Center-align the title text */
border: 6px solid #E2B808;  /* Add border around the title */
border-radius: 10px;  /* Round corners of the title */
padding: 10px;  /* Add padding inside the title */
background-color: #0A7029;  /* Set background color for the title */
box-shadow: 2px 2px 8px rgba(0,0,0,0.3);  /* Add shadow to the title */
}
h3 {
color: black;  /* Set text color for h3 elements */
font-size: 20px;  /* Set font size for h3 elements */
font-weight: bold;  /* Set text bold */
}
p {
color: black;  /* Set text color for paragraphs */
font-size: 20px;  /* Set font size for paragraphs */
font-weight: bold;  /* Make paragraphs bold */
}
.action-button {
background-color: #0A7029;  /* Set background color for action buttons */
color: white;  /* Set text color for action buttons */
border: 3px solid black;  /* Add border for action buttons */
border-radius: 5px;  /* Round corners of action buttons */
padding: 10px 20px;  /* Add padding inside action buttons */
font-size: 20px;  /* Set font size for action buttons */
font-weight: bold;  /* Set text bold */
}
"))
),
# Title displayed at the top of the app
div(class = "title", HTML("Speedy Skyscrapers<br>Does Age Matter in Tower Building?")), br(),
# Define layout of the page with a sidebar and a main panel
# radioButtons = checkboxes
sidebarLayout(
sidebarPanel(
class = "sidebar",
sliderInput("blocks", "Number of Blocks (HEIGHT)?", min = 1, max = 10, value = 1),
radioButtons("age", "Age",
choices = c("Toddler (0-4)" = "Toddler (0-4)",
"Young Child (5-8)" = "Young Child (5-8)",
"Child (9-12)" = "Child (9-12)",
"Teen (13-19)" = "Teen (13-19)",
"Young Adult (20-35)" = "Young Adult (20-35)",
"Adult (36-60)" = "Adult (36-60)",
"Older Adult (61-70)" = "Older Adult (61-70)",
"Senior (70+)" = "Senior (70+)")),
radioButtons("color", "Favorite Colour",
choices = c("Red" = "#FF0000",
"Yellow" = "#FFD700",
"Pink" = "#FF0080",
"Green" = "#008000",
"Orange" = "#FFA500",
"Purple" = "#800080",
"Blue" = "#0000FF")),
actionButton("add", "Plot Data"),
br(), br(),
),
# Main panel to display the scatter plot
mainPanel(
width = 8,
plotlyOutput("scatterPlot", height = "600px", width = "1200px")
)))
# Server logic to handle user inputs and generate outputs
server <- function(input, output, session) {
# Define the path for saving the inputs as a CSV
tower <- "data/nsf2025_data_collection_1.csv" # Saturday = 191 entries
#tower <- "data/nsf2025_data_collection_1.csv" # Sunday = 212 entries
# Load existing data if it exists
if (file.exists(tower)) {
tower_data <- read.csv(tower)
} else {
tower_data <- data.frame(Age = character(), Blocks = numeric(), Color = character())
}
# Create a reactive dataframe to store user inputs
data <- reactiveVal(tower_data)
# Update the dataframe when the action button is clicked
observeEvent(input$add, {
new_row <- data.frame(Age = input$age, Blocks = input$blocks, Color = input$color, stringsAsFactors = FALSE)
updated_data <- rbind(data(), new_row)
data(updated_data)
# Save updated data to CSV
write.csv(updated_data, tower, row.names = FALSE)
})
# Generate and render the scatter plot when the data changes
output$scatterPlot <- renderPlotly({
# Retrieve the current data
plot_data <- data()
# Define the levels and order for Age
plot_data$Age <- factor(plot_data$Age, levels = c(
"Toddler (0-4)", "Young Child (5-8)", "Child (9-12)", "Teen (13-19)",
"Young Adult (20-35)", "Adult (36-60)", "Older Adult (61-70)", "Senior (70+)"
))
# Create the ggplot scatter plot
p <- ggplot(plot_data, aes(y = Blocks, x = Age, color = Color, text = paste("<br>Age:", Age, "<br>Blocks:", Blocks))) +
geom_point(size = 6, shape = 21, fill = plot_data$Color) + # Add points to the plot with customized size and colour
geom_jitter() +
scale_color_identity() + # Use the exact color values provided (no automatic scaling)
theme_minimal(base_size = 15) + # Apply a minimal theme to the plot
labs(y = "Number of Blocks (HEIGHT)", x = "Age") + # Set labels for axes
scale_y_continuous(limits = c(0, 10), breaks = 0:10) + # Set y-axis limits and breaks
scale_x_discrete(labels = c(
"Toddler (0-4)" = "Toddler",
"Young Child (5-8)" = "YC",
"Child (9-12)" = "Child",
"Teen (13-19)" = "Teen",
"Young Adult (20-35)" = "YA",
"Adult (36-60)" = "Adult",
"Older Adult (61-70)" = "OA",
"Senior (70+)" = "Senior"
)) + # Rename x-axis labels
theme(plot.title = element_text(face = "bold", size = 20, color = "#000000"), # Customize plot title style
axis.title = element_text(face = "bold", size = 16), # Customize axis title style
axis.text.x = element_text(face = "bold"), # Customize x-axis text style
axis.text.y = element_text(face = "bold"), # Customize y-axis text style
legend.position = "none", # Hide legend
panel.background = element_rect(fill = "#F0FFFF"), # Set panel background color
plot.background = element_rect(fill = "#F0FFFF"), # Set overall plot background color
panel.grid.major = element_line(color = "#000000"), # Customize major grid lines
panel.grid.minor = element_line(color = "#000000")) # Customize minor grid lines
# Convert the ggplot to a Plotly object for interactivity and set custom tooltips
ggplotly(p, tooltip = "text") %>%
layout(autosize = TRUE) # Enable autosize
})
}
# Run the Shiny app
shinyApp(ui = ui_nsf25_3, server = server)
unique(nsf25$Age)
summary(nsf25$Age)
# Sample data for age categories and participants
age_data <- data.frame(
age = c("Toddler (0-4)", "Young Child (5-8)", "Child (9-12)", "Teen (13-19)", "Young Adult (20-35)", "Adult (36-60)", "Older Adult (61-70)", "Senior (70+)"),
participants = c(48, 141, 100, 22, 27, 47, 8, 9))
glimpse(age_data)
age_data <- pivot_longer(data = age_data, # save to country_data
cols = age:participants,
names_to = "age",
values_to = "participants")
glimpse(age_data)
age_data <- pivot_longer(data = age_data)
glimpse(age_data)
# Pivot the data frame to longer format
age_data_long <- pivot_longer(
age_data,
cols = participants,
names_to = "variable",
values_to = "count"
)
glimpse(age_data)
# View the transformed data
print(age_data)
# Create bar chart
colours <- c("#DB1F48", "#FAD02C", "#FD49A0", "#59981A", "#FD7F20", "#C197D2", "#01949A", "#B7AC44")
participants_plot <- age_data %>%
ggplot(aes(x = age, y = participants, fill = factor(participants))) +
geom_bar(stat = "identity", colour = "black") +
scale_fill_manual(values = colours) +
labs(title = "Number of participants per age group", x = "Age", y = "Count") +
theme_bw() +
scale_y_continuous(limits = c(0, 150), breaks = seq(0, 150, by = 10)) + # Set y-axis limits and breaks
scale_x_discrete(labels = c(
"Toddler (0-4)", "Young Child (5-8)", "Child (9-12)", "Teen (13-19)",
"Young Adult (20-35)", "Adult (36-60)", "Older Adult (61-70)", "Senior (70+)"
)) +
custom_theme() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
participants_plot
# View the transformed data
print(age_data)
# Pivot the data frame to longer format
age_data <- pivot_longer(
age_data,
cols = participants,
names_to = "variable",
values_to = "count"
)
# View the transformed data
print(age_data)
participants_plot <- age_data %>%
ggplot(aes(x = age, y = count, fill = count)) +
geom_bar(stat = "identity", colour = "black") +
scale_fill_manual(values = colours) +
labs(title = "Number of participants per age group", x = "Age", y = "Count") +
theme_bw() +
scale_y_continuous(limits = c(0, 150), breaks = seq(0, 150, by = 10)) + # Set y-axis limits and breaks
scale_x_discrete(labels = c(
"Toddler (0-4)", "Young Child (5-8)", "Child (9-12)", "Teen (13-19)",
"Young Adult (20-35)", "Adult (36-60)", "Older Adult (61-70)", "Senior (70+)"
)) +
custom_theme() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
participants_plot
participants_plot <- age_data %>%
ggplot(aes(x = age, y = count)) +
geom_bar(stat = "identity", colour = "black") +
scale_fill_manual(values = colours) +
labs(title = "Number of participants per age group", x = "Age", y = "Count") +
theme_bw() +
scale_y_continuous(limits = c(0, 150), breaks = seq(0, 150, by = 10)) + # Set y-axis limits and breaks
scale_x_discrete(labels = c(
"Toddler (0-4)", "Young Child (5-8)", "Child (9-12)", "Teen (13-19)",
"Young Adult (20-35)", "Adult (36-60)", "Older Adult (61-70)", "Senior (70+)"
)) +
custom_theme() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
participants_plot
participants_plot <- age_data %>%
ggplot(aes(x = age, y = count, fill = count)) +
geom_bar(stat = "identity", colour = "black") +
scale_fill_manual(values = colours) +
labs(title = "Number of participants per age group", x = "Age", y = "Count") +
theme_bw() +
scale_y_continuous(limits = c(0, 150), breaks = seq(0, 150, by = 10)) + # Set y-axis limits and breaks
scale_x_discrete(labels = c(
"Toddler (0-4)", "Young Child (5-8)", "Child (9-12)", "Teen (13-19)",
"Young Adult (20-35)", "Adult (36-60)", "Older Adult (61-70)", "Senior (70+)"
)) +
custom_theme() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
participants_plot
participants_plot <- age_data %>%
ggplot(aes(x = age, y = count, fill = age)) +
geom_bar(stat = "identity", colour = "black") +
scale_fill_manual(values = colours) +
labs(title = "Number of participants per age group", x = "Age", y = "Count") +
theme_bw() +
scale_y_continuous(limits = c(0, 150), breaks = seq(0, 150, by = 10)) + # Set y-axis limits and breaks
scale_x_discrete(labels = c(
"Toddler (0-4)", "Young Child (5-8)", "Child (9-12)", "Teen (13-19)",
"Young Adult (20-35)", "Adult (36-60)", "Older Adult (61-70)", "Senior (70+)"
)) +
custom_theme() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
participants_plot
glimpse(age_data)
# View the transformed data
print(age_data)
participants_plot <- age_data %>%
ggplot(aes(x = age, y = count)) +
geom_bar(stat = "identity", colour = "black") +
scale_fill_manual(values = colours) +
labs(title = "Number of participants per age group", x = "Age", y = "Count") +
theme_bw() +
scale_y_continuous(limits = c(0, 150), breaks = seq(0, 150, by = 10)) + # Set y-axis limits and breaks
scale_x_discrete(labels = c(
"Toddler (0-4)", "Young Child (5-8)", "Child (9-12)", "Teen (13-19)",
"Young Adult (20-35)", "Adult (36-60)", "Older Adult (61-70)", "Senior (70+)"
)) +
custom_theme() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
participants_plot
participants_plot <- age_data %>%
ggplot(aes(x = age, y = count, fill = colours)) +
geom_bar(stat = "identity", colour = "black") +
scale_fill_manual(values = colours) +
labs(title = "Number of participants per age group", x = "Age", y = "Count") +
theme_bw() +
scale_y_continuous(limits = c(0, 150), breaks = seq(0, 150, by = 10)) + # Set y-axis limits and breaks
scale_x_discrete(labels = c(
"Toddler (0-4)", "Young Child (5-8)", "Child (9-12)", "Teen (13-19)",
"Young Adult (20-35)", "Adult (36-60)", "Older Adult (61-70)", "Senior (70+)"
)) +
custom_theme() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
participants_plot
source("C:/Users/Katie/Desktop/R_files/masters/bioinformatics/bioinformatics_intro/scripts/100318577_r_workshop.R", echo=TRUE)
summary(nsf25)
age_plot <- nsf25 %>%
ggplot(aes(x=Age, y=Blocks)) +
geom_jitter() +
theme_classic()
glimpse(nsf25)
# PACKAGES ----
library(tidyverse)
# LOAD DATA ----
genotypes<-read_tsv("data/GWAS_data/Chr12_Genotypes.tsv")
phenotypes<-read_tsv("data/GWAS_data/Phenotype_Height.tsv")
# PACKAGES ----
library(tidyverse)
