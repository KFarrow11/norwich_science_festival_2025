install.packages("shiny", "tidyverse")
install.packages("plotly")
# Packages ----------------------------------------------------------------
library(shiny)
library(tidyverse)
library(plotly)
ui <- fluidPage(
tags$head(
tags$style(HTML("
body {
background-color: #D8F0F0;
font-family: Arial, sans-serif;
}
.sidebar {
background-color: #7ADCF5;
padding: 20px;
border: 3px solid #19CAF6;
border-radius: 10px;
}
.title {
color: #0F55A3;
font-size: 40px;
font-weight: bold;
text-align: center;
border: 3px solid #19CAF6;
border-radius: 10px;
padding: 10px;
background-color: #7ADCF5;
box-shadow: 2px 2px 8px rgba(0,0,0,0.3);
}
h3 {
color: #4CAF50;
font-size: 20px;
}
p {
color: #0F55A3;
font-size: 18px;
font-weight: bold;
}
.action-button {
background-color: #0F55A3;
color: white;
border: none;
border-radius: 5px;
padding: 10px 20px;
font-size: 16px;
}
"))
),
# Title
div(class = "title", "60 SECOND SKYSCRAPER!"), br(), # UPDATE NAME
# Sidebar layout
sidebarLayout(
sidebarPanel(
class = "sidebar",
textInput("name", "What's your name?"),
numericInput("age", "How old are you?", value = 5, min = 1, max = 100),
numericInput("time", "How fast were you?", value = 0, min = 0), # MAYBE CHANGE
selectInput("color", "What's your favourite colour?",
choices = c("Yellow Team" = "#FFD700",
"Blue Team" = "#1E90FF",
"Green Team" = "#4EBA8B",
"Red Team" = "#DE0013")),
actionButton("add", "Add to plot"),
br(), br(),
img(src = "https://s3-eu-west-1.amazonaws.com/images.linnlive.com/83485047ad86c6e2cdb6a8d751245bb9/d1866711-b5a0-4a1f-9a84-b6546bea7b79.jpg", height = "200px", alt = "Tumbling toy blocks"),
br(), br(),
p("Are you part of the winning team?")
),
# Main panel to display the plot
mainPanel(
plotlyOutput("scatterPlot")
)
)
)
# Define server logic -----------------------------------------------------
server <- function(input, output, session) {
# Create a reactive dataframe to store user inputs
data <- reactiveVal(data.frame(Name = character(), Age = numeric(),
Time = numeric(), Color = character(), stringsAsFactors = FALSE))
# Update the dataframe when the 'Add to plot' button is clicked
observeEvent(input$add, {
new_row <- data.frame(Name = input$name, Age = input$age,
Time = input$time, Color = input$color, stringsAsFactors = FALSE)
data(rbind(data(), new_row))
})
# Generate the interactive scatter plot
output$scatterPlot <- renderPlotly({
plot_data <- data()
p <- ggplot(plot_data, aes(x = Time, y = factor(Age), color = Color,
text = paste("Name:", Name, "<br>Age:", Age, "<br>Time:", Time))) +
geom_point(size = 6, shape = 21, fill = plot_data$Color) +
scale_color_identity() +
theme_minimal(base_size = 15) +
labs(x = "Time Taken (seconds)", y = "Age", title = " ") +
theme(plot.title = element_text(face = "bold", size = 20, color = "#FF6347"),
axis.title = element_text(face = "bold", size = 16),
legend.position = "none",
panel.background = element_rect(fill = "#D8F0F0"),
plot.background = element_rect(fill = "#D8F0F0"),
panel.grid.major = element_line(color = "#18508F"),
panel.grid.minor = element_line(color = "#18508F"))
ggplotly(p, tooltip = "text")
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
# Run the Shiny app
shinyApp(ui = ui, server = server)
install.packages("shiny")
install.packages("tidyverse")
install.packages("plotly")
install.packages("gganimate")
library(shiny)
library(tidyverse)
library(plotly)
library(ggplot2)
library(gganimate)
library(gifski)
install.packages("gganimate")
install.packages("gifski")
library(shiny)
library(tidyverse)
library(plotly)
library(ggplot2)
library(gganimate)
library(gifski)
# Create a data frame for the blocks
blocks <- data.frame(
block = rep(1:20, each = 1),
height = rep(1, 20),
color = rep(c("#FFD700", "#1E90FF", "#4EBA8B", "#DE0013", "#800080", "#FFA500"), length.out = 20)
)
# Create the plot
p <- ggplot(blocks, aes(x = block, y = height, fill = color)) +
geom_bar(stat = "identity", width = 0.8) +
scale_fill_identity() +
theme_minimal() +
theme(axis.title = element_blank(), axis.text = element_blank(), axis.ticks = element_blank()) +
transition_states(block, transition_length = 1, state_length = 1) +
enter_fade() +
exit_fade()
# Save the animation
animate(p, nframes = 40, renderer = gifski_renderer("blocks_animation.gif"))
# Create a data frame for the blocks
blocks <- data.frame(
block = rep(1:20, each = 1),
height = rep(1, 20),
color = rep(c("#FFD700", "#1E90FF", "#4EBA8B", "#DE0013", "#800080", "#FFA500"), length.out = 20)
)
# Add a cumulative sum for the heights to create the stacking effect
blocks <- blocks %>% mutate(cumulative_height = cumsum(height))
# Create the plot
p <- ggplot(blocks, aes(x = factor(block), y = cumulative_height, fill = color)) +
geom_bar(stat = "identity", width = 0.8) + scale_fill_identity() +
theme_minimal() +
theme(axis.title = element_blank(), axis.text = element_blank(), axis.ticks = element_blank()) +
transition_states(block, transition_length = 1,
state_length = 1) +
enter_fade() + exit_fade() # Save the animation
animate(p, nframes = 40, renderer = gifski_renderer("blocks_animation.gif"))
# Create the plot
p <- ggplot(blocks, aes(x = factor(block), y = cumulative_height, fill = color)) +
geom_bar(stat = "identity", width = 0.8) + scale_fill_identity() +
theme_bw() +
theme(axis.title = element_blank(), axis.text = element_blank(), axis.ticks = element_blank()) +
transition_states(block, transition_length = 1,
state_length = 1) +
enter_fade() + exit_fade() # Save the animation
animate(p, nframes = 40, renderer = gifski_renderer("blocks_animation.gif"))
# Create the plot
p <- ggplot(blocks, aes(x = factor(block), y = cumulative_height, fill = color)) +
geom_bar(stat = "identity", width = 0.8) + scale_fill_identity() +
theme_classic() +
theme(axis.title = element_blank(), axis.text = element_blank(), axis.ticks = element_blank()) +
transition_states(block, transition_length = 1,
state_length = 1) +
enter_fade() + exit_fade() # Save the animation
animate(p, nframes = 40, renderer = gifski_renderer("blocks_animation.gif"))
