<<<<<<< Updated upstream
<<<<<<< Updated upstream
<<<<<<< Updated upstream
class = "sidebar",  # Apply custom class for styling the sidebar
numericInput("age", "How old are you?", value = 5, min = 1, max = 100), # Numeric input for user's age
numericInput("blocks", "How many blocks?", value = 0, min = 0, max = 20), # How many blocks standing (1-20)
=======
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
selectInput("color", "What's your favourite colour?", # Pick a colour from options
choices = c("Pink" = "#F39",  # Bright pink, highly distinguishable
"Blue" = "#1E90FF",  # Bright blue, stands out well
"Green" = "#81B622",  # Soft green with good contrast
"Red" = "#DE0013",  # Intense red, very distinguishable
"Purple" = "#800080",  # Deep purple, contrasting with other colors
"Orange" = "#FFA500")),  # Vibrant orange, easy to spot
actionButton("add", "Plot Data"),  # Button to Plot Data
<<<<<<< Updated upstream
<<<<<<< Updated upstream
<<<<<<< Updated upstream
br(), br(),
img(src = "Data collection.svg", height = "400px", alt = "Tumbling toy blocks"),# Image displayed in the sidebar
# img(src = "https://tinyurl.com/ycxrhr4d", height = "400px", width = "300px", alt = "Tumbling toy blocks"), # Image displayed in the sidebar
=======
br(), br() , # Image displayed in the sidebar
>>>>>>> Stashed changes
=======
br(), br() , # Image displayed in the sidebar
>>>>>>> Stashed changes
=======
br(), br() , # Image displayed in the sidebar
>>>>>>> Stashed changes
br(), br(),),
# Main panel to display the scatter plot
mainPanel(
width = 8,  # Adjust the main panel width to fill more space
plotlyOutput("scatterPlot")  # Placeholder for the interactive scatter plot
)
))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
<<<<<<< Updated upstream
# server_2 logic to handle user inputs and generate outputs
server_2 <- function(input, output, session) {
# Create a reactive value to store the data for the plot
data <- reactiveVal(data.frame(Age = numeric(),
Blocks = numeric(), Color = character(), stringsAsFactors = FALSE))
# When the "Add to plot" button is clicked, update the data
observeEvent(input$add, {
# Create a new row from the user inputs
new_row <- data.frame(Age = input$age,
Blocks = input$blocks, Color = input$color, stringsAsFactors = FALSE)
# Append the new row to the existing data
data(rbind(data(), new_row))  # Update the reactive value with the new data
=======
=======
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
# Combined server logic
server <- function(input, output, session) {
# Define the path for saving the inputs as a CSV
tower <- "data/nsf2025_data_collection.csv"
# Load existing data if it exists
if (file.exists(tower)) {
tower_data <- read.csv(tower)
} else {
tower_data <- data.frame(Age = numeric(),
Blocks = numeric(), Color = character())
}
# Create a reactive dataframe to store user inputs
data <- reactiveVal(tower_data)
# Update the dataframe when the action button is clicked
observeEvent(input$add, {
new_row <- data.frame(Age = input$age,
Blocks = input$blocks, Color = input$color, stringsAsFactors = FALSE)
updated_data <- rbind(data(), new_row)
data(updated_data)
# Save updated data to CSV
write.csv(updated_data, tower, row.names = FALSE)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
})
# Generate and render the scatter plot when the data changes
output$scatterPlot <- renderPlotly({
# Retrieve the current data
plot_data <- data()
<<<<<<< Updated upstream
<<<<<<< Updated upstream
<<<<<<< Updated upstream
=======
=======
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
# Create the ggplot scatter plot
p <- ggplot(plot_data, aes(y = Blocks, x = factor(Age), color = Color,
text = paste("<br>Age:", Age, "<br>Blocks:", Blocks))) +
geom_point(size = 6, shape = 21, fill = plot_data$Color) +  # Add points to the plot with customized size and color
scale_color_identity() +  # Use the exact color values provided (no automatic scaling)
theme_minimal(base_size = 15) +  # Apply a minimal theme to the plot
labs(y = "Number of Blocks", x = "Age") +  # Set labels for axes
theme(plot.title = element_text(face = "bold", size = 20, color = "#000000"),  # Customize plot title style
axis.title = element_text(face = "bold", size = 16),  # Customize axis title style
legend.position = "none",  # Hide legend
panel.background = element_rect(fill = "#C7CED6"),  # Set panel background color
plot.background = element_rect(fill = "#C7CED6"),  # Set overall plot background color
panel.grid.major = element_line(color = "#000000"),  # Customize major grid lines
panel.grid.minor = element_line(color = "#000000"))  # Customize minor grid lines
# Convert the ggplot to a Plotly object for interactivity and set custom tooltips
ggplotly(p, tooltip = "text")
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
# Packages ----
library(shiny)
library(tidyverse)
library(plotly)
# ___________________________________________________________________________________________________________________----
# Define UI and Custom Styles ----
# UI (User Interface) Setup
ui <- fluidPage(
# Define custom styles/theme for app page
tags$head(
tags$style(HTML("
body {
background-color: #C7CED6;  /* Set background color of the body */
font-family: 'Lucida Console', Monaco, monospace;  /* Set font family for the page */
}
.sidebar {
background-color: #B23AEE;  /* Set background color for sidebar */
padding: 20px;  /* Add padding inside the sidebar */
border: 3px solid #000000;  /* Add border to sidebar */
border-radius: 10px;  /* Round corners of the sidebar */
}
.title {
color: #000000;  /* Set text color for title */
font-size: 40px;  /* Set font size for title */
font-weight: bold;  /* Make title bold */
text-align: center;  /* Center-align the title text */
border: 3px solid #000000;  /* Add border around the title */
border-radius: 10px;  /* Round corners of the title */
padding: 10px;  /* Add padding inside the title */
background-color: #B23AEE;  /* Set background color for the title */
box-shadow: 2px 2px 8px rgba(0,0,0,0.3);  /* Add shadow to the title */
}
h3 {
color: #000000;  /* Set text color for h3 elements */
font-size: 20px;  /* Set font size for h3 elements */
font-weight: bold;  /* Set text bold */
}
p {
color: #000000;  /* Set text color for paragraphs */
font-size: 20px;  /* Set font size for paragraphs */
font-weight: bold;  /* Make paragraphs bold */
}
.action-button {
background-color: #76B947;  /* Set background color for action buttons */
color: black;  /* Set text color for action buttons */
border: 3px solid #000000;  /* Add border for action buttons */
border-radius: 5px;  /* Round corners of action buttons */
padding: 10px 20px;  /* Add padding inside action buttons */
font-size: 20px;  /* Set font size for action buttons */
font-weight: bold;  /* Set text bold */
}
"))
),
# Title displayed at the top of the app
div(class = "title", "Impact of Age on the Speed of Constructing a Tower in 30 Seconds"), br(), # Displays the title with styling
# Define layout of the page with a sidebar and a main panel
sidebarLayout(
sidebarPanel(
class = "sidebar",  # Apply custom class for styling the sidebar
numericInput("age", "How old are you?", value = 5, min = 1, max = 100), # Numeric input for user's age
numericInput("blocks", "How many blocks?", value = 0, min = 0, max = 20), # How many blocks standing (1-20)
selectInput("color", "What's your favourite colour?", # Pick a colour from options
choices = c("Pink" = "#F39",  # Bright pink, highly distinguishable
"Blue" = "#1E90FF",  # Bright blue, stands out well
"Green" = "#81B622",  # Soft green with good contrast
"Red" = "#DE0013",  # Intense red, very distinguishable
"Purple" = "#800080",  # Deep purple, contrasting with other colors
"Orange" = "#FFA500")),  # Vibrant orange, easy to spot
actionButton("add", "Plot Data"),  # Button to Plot Data
br(), br() , # Image displayed in the sidebar
br(), br(),),
# Main panel to display the scatter plot
mainPanel(
width = 8,  # Adjust the main panel width to fill more space
plotlyOutput("scatterPlot")  # Placeholder for the interactive scatter plot
)
))
# Combined server logic
server <- function(input, output, session) {
# Define the path for saving the inputs as a CSV
tower <- "data/nsf2025_data_collection.csv"
# Load existing data if it exists
if (file.exists(tower)) {
tower_data <- read.csv(tower)
} else {
tower_data <- data.frame(Age = numeric(),
Blocks = numeric(), Color = character())
}
# Create a reactive dataframe to store user inputs
data <- reactiveVal(tower_data)
# Update the dataframe when the action button is clicked
observeEvent(input$add, {
new_row <- data.frame(Age = input$age,
Blocks = input$blocks, Color = input$color, stringsAsFactors = FALSE)
updated_data <- rbind(data(), new_row)
data(updated_data)
# Save updated data to CSV
write.csv(updated_data, tower, row.names = FALSE)
})
# Generate and render the scatter plot when the data changes
output$scatterPlot <- renderPlotly({
# Retrieve the current data
plot_data <- data()
# Create the ggplot scatter plot
p <- ggplot(plot_data, aes(y = Blocks, x = factor(Age), color = Color,
text = paste("<br>Age:", Age, "<br>Blocks:", Blocks))) +
geom_point(size = 6, shape = 21, fill = plot_data$Color) +  # Add points to the plot with customized size and color
scale_color_identity() +  # Use the exact color values provided (no automatic scaling)
theme_minimal(base_size = 15) +  # Apply a minimal theme to the plot
labs(y = "Number of Blocks", x = "Age") +  # Set labels for axes
theme(plot.title = element_text(face = "bold", size = 20, color = "#000000"),  # Customize plot title style
axis.title = element_text(face = "bold", size = 16),  # Customize axis title style
legend.position = "none",  # Hide legend
panel.background = element_rect(fill = "#C7CED6"),  # Set panel background color
plot.background = element_rect(fill = "#C7CED6"),  # Set overall plot background color
panel.grid.major = element_line(color = "#000000"),  # Customize major grid lines
panel.grid.minor = element_line(color = "#000000"))  # Customize minor grid lines
# Convert the ggplot to a Plotly object for interactivity and set custom tooltips
ggplotly(p, tooltip = "text")
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
# Define UI and Custom Styles ---------------------------------------------
ui_3 <- fluidPage(
tags$head(
tags$style(HTML("
body {
background-color: #D8F0F0;
font-family: Arial, sans-serif;
}
.sidebar {
background-color: #7ADCF5;
padding: 20px;
border: 3px solid #19CAF6;
border-radius: 10px;
}
.title {
color: #0F55A3;
font-size: 40px;
font-weight: bold;
text-align: center;
border: 3px solid #19CAF6;
border-radius: 10px;
padding: 10px;
background-color: #7ADCF5;
box-shadow: 2px 2px 8px rgba(0,0,0,0.3);
}
h3 {
color: #4CAF50;
font-size: 20px;
}
p {
color: #0F55A3;
font-size: 18px;
font-weight: bold;
}
.action-button {
background-color: #0F55A3;
color: white;
border: none;
border-radius: 5px;
padding: 10px 20px;
font-size: 16px;
}
"))
),
# Title
div(class = "title", "60 SECOND SKYSCRAPER"), br(),
# Sidebar layout
sidebarLayout(
sidebarPanel(
class = "sidebar",
numericInput("age", "How old are you?", value = 5, min = 1, max = 100),
numericInput("time", "How fast were you?", value = 0, min = 0),
selectInput("color", "What's your favourite colour?",
choices = c("Yellow Team" = "#FFD700",
"Blue Team" = "#1E90FF",
"Green Team" = "#4EBA8B",
"Red Team" = "#DE0013")),
actionButton("add", "Add to plot"),
br(), br(),
img(src = "https://s3-eu-west-1.amazonaws.com/images.linnlive.com/83485047ad86c6e2cdb6a8d751245bb9/d1866711-b5a0-4a1f-9a84-b6546bea7b79.jpg", height = "200px", alt = "Tumbling toy blocks"),
br(), br(),
),
# Main panel to display the plot
mainPanel(
plotlyOutput("scatterPlot")
)
)
)
# Define server logic -----------------------------------------------------
server_3 <- function(input, output, session) {
# Define the path for saving the inputs as a CSV
tower <- "data/changethisfilename.csv" }
#This is where the input data is stored - change the file name to get a fresh graph
# Load existing data if it exists
if (file.exists(tower)) {
tower_data <- read.csv(tower)
} else {
tower_data <- data.frame(Age = numeric(),
Time = numeric(), Color = character())
}
# Create a reactive dataframe to store user inputs
data <- reactiveVal(tower_data)
# Update the dataframe when the action button is clicked
observeEvent(input$add, {
if (input$name != "") {  # Check if a name is entered
new_row <- data.frame(Age = input$age,
Time = input$time, Color = input$color, stringsAsFactors = FALSE)
updated_data <- rbind(data(), new_row)
data(updated_data)
# Save updated data to CSV
write.csv(updated_data, tower, row.names = FALSE)
} else {
showModal(modalDialog(
title = "Input Error",
"Please enter your name.",
easyClose = TRUE,
footer = NULL
))
}
})
# Generate the interactive scatter plot
output$scatterPlot <- renderPlotly({
# Retrieve the current data
plot_data <- data()
<<<<<<< Updated upstream
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
# Create the ggplot scatter plot
p <- ggplot(plot_data, aes(y = Blocks, x = factor(Age), color = Color,
text = paste("<br>Age:", Age, "<br>Blocks:", Blocks))) +
geom_point(size = 6, shape = 21, fill = plot_data$Color) +  # Add points to the plot with customized size and color
scale_color_identity() +  # Use the exact color values provided (no automatic scaling)
theme_minimal(base_size = 15) +  # Apply a minimal theme to the plot
labs(y = "Number of Blocks", x = "Age") +  # Set labels for axes
theme(plot.title = element_text(face = "bold", size = 20, color = "#000000"),  # Customize plot title style
axis.title = element_text(face = "bold", size = 16),  # Customize axis title style
legend.position = "none",  # Hide legend
panel.background = element_rect(fill = "#C7CED6"),  # Set panel background color
plot.background = element_rect(fill = "#C7CED6"),  # Set overall plot background color
panel.grid.major = element_line(color = "#000000"),  # Customize major grid lines
<<<<<<< Updated upstream
<<<<<<< Updated upstream
panel.grid.minor = element_line(color = "#000000")) +  # Customize minor grid lines
scale_y_continuous(breaks = c(0, 20)) +  # Set y-axis breaks
scale_x_continuous(breaks = c(1, 100))  # Set x-axis breaks
# Convert the ggplot to a Plotly object for interactivity and set custom tooltips
ggplotly(p, tooltip = "text")
})
}
# Run the Shiny app
shinyApp(ui = ui_2, server = server_2)
=======
panel.grid.minor = element_line(color = "#000000"),  # Customize minor grid lines
scale_y_continuous(breaks = c(0, 20))) }) # Set y-axis breaks
# Generate the interactive scatter plot
output$scatterPlot <- renderPlotly({
# Retrieve the current data
plot_data <- data()
=======
>>>>>>> Stashed changes
# Create the ggplot scatter plot
p <- ggplot(plot_data, aes(y = blocks, x = factor(age), color = color,
text = paste("<br>Age:", age, "<br>Blocks:", blocks))) +
geom_point(size = 6, shape = 21, fill = plot_data$Color) +  # Add points to the plot with customized size and color
scale_color_identity() +  # Use the exact color values provided (no automatic scaling)
theme_minimal(base_size = 15) +  # Apply a minimal theme to the plot
labs(y = "Number of Blocks", x = "Age") +  # Set labels for axes
theme(plot.title = element_text(face = "bold", size = 20, color = "#000000"),  # Customize plot title style
axis.title = element_text(face = "bold", size = 16),  # Customize axis title style
legend.position = "none",  # Hide legend
panel.background = element_rect(fill = "#C7CED6"),  # Set panel background color
plot.background = element_rect(fill = "#C7CED6"),  # Set overall plot background color
panel.grid.major = element_line(color = "#000000"),  # Customize major grid lines
panel.grid.minor = element_line(color = "#000000"),  # Customize minor grid lines
scale_y_continuous(breaks = c(0, 20))) }) # Set y-axis breaks
<<<<<<< Updated upstream
=======
# Generate the interactive scatter plot
output$scatterPlot <- renderPlotly({
# Retrieve the current data
plot_data <- data()
# Create the ggplot scatter plot
p <- ggplot(plot_data, aes(y = blocks, x = factor(age), color = color,
text = paste("<br>Age:", age, "<br>Blocks:", blocks))) +
geom_point(size = 6, shape = 21, fill = plot_data$Color) +  # Add points to the plot with customized size and color
scale_color_identity() +  # Use the exact color values provided (no automatic scaling)
theme_minimal(base_size = 15) +  # Apply a minimal theme to the plot
labs(y = "Number of Blocks", x = "Age") +  # Set labels for axes
theme(plot.title = element_text(face = "bold", size = 20, color = "#000000"),  # Customize plot title style
axis.title = element_text(face = "bold", size = 16),  # Customize axis title style
legend.position = "none",  # Hide legend
panel.background = element_rect(fill = "#C7CED6"),  # Set panel background color
plot.background = element_rect(fill = "#C7CED6"),  # Set overall plot background color
panel.grid.major = element_line(color = "#000000"),  # Customize major grid lines
panel.grid.minor = element_line(color = "#000000"),  # Customize minor grid lines
scale_y_continuous(breaks = c(0, 20))) }) # Set y-axis breaks
>>>>>>> Stashed changes
# Run the Shiny app
shinyApp(ui = ui_3, server = server_3)
# Define UI and Custom Styles ---------------------------------------------
ui_3 <- fluidPage(
tags$head(
tags$style(HTML("
body {
background-color: #D8F0F0;
font-family: Arial, sans-serif;
}
.sidebar {
background-color: #7ADCF5;
padding: 20px;
border: 3px solid #19CAF6;
border-radius: 10px;
}
.title {
color: #0F55A3;
font-size: 40px;
font-weight: bold;
text-align: center;
border: 3px solid #19CAF6;
border-radius: 10px;
padding: 10px;
background-color: #7ADCF5;
box-shadow: 2px 2px 8px rgba(0,0,0,0.3);
}
h3 {
color: #4CAF50;
font-size: 20px;
}
p {
color: #0F55A3;
font-size: 18px;
font-weight: bold;
}
.action-button {
background-color: #0F55A3;
color: white;
border: none;
border-radius: 5px;
padding: 10px 20px;
font-size: 16px;
}
"))
),
# Title
div(class = "title", "60 SECOND SKYSCRAPER"), br(),
# Sidebar layout
sidebarLayout(
sidebarPanel(
class = "sidebar",
numericInput("age", "How old are you?", value = 5, min = 1, max = 100),
numericInput("time", "How fast were you?", value = 0, min = 0),
selectInput("color", "What's your favourite colour?",
choices = c("Yellow Team" = "#FFD700",
"Blue Team" = "#1E90FF",
"Green Team" = "#4EBA8B",
"Red Team" = "#DE0013")),
actionButton("add", "Add to plot"),
br(), br(),
img(src = "https://s3-eu-west-1.amazonaws.com/images.linnlive.com/83485047ad86c6e2cdb6a8d751245bb9/d1866711-b5a0-4a1f-9a84-b6546bea7b79.jpg", height = "200px", alt = "Tumbling toy blocks"),
br(), br(),
),
# Main panel to display the plot
mainPanel(
plotlyOutput("scatterPlot")
)
)
)
# ___________________________________________________________________________________________________________________----
# Define UI and Custom Styles ----
>>>>>>> Stashed changes
# UI (User Interface) Setup
ui <- fluidPage(
# Define custom styles/theme for app page
tags$head(
tags$style(HTML("
body {
background-color: #C7CED6;  /* Set background color of the body */
font-family: 'Lucida Console', Monaco, monospace;  /* Set font family for the page */
}
.sidebar {
background-color: #B23AEE;  /* Set background color for sidebar */
padding: 20px;  /* Add padding inside the sidebar */
border: 3px solid #000000;  /* Add border to sidebar */
border-radius: 10px;  /* Round corners of the sidebar */
}
.title {
color: #000000;  /* Set text color for title */
font-size: 40px;  /* Set font size for title */
font-weight: bold;  /* Make title bold */
text-align: center;  /* Center-align the title text */
border: 3px solid #000000;  /* Add border around the title */
border-radius: 10px;  /* Round corners of the title */
padding: 10px;  /* Add padding inside the title */
background-color: #B23AEE;  /* Set background color for the title */
box-shadow: 2px 2px 8px rgba(0,0,0,0.3);  /* Add shadow to the title */
}
h3 {
color: #000000;  /* Set text color for h3 elements */
font-size: 20px;  /* Set font size for h3 elements */
font-weight: bold;  /* Set text bold */
}
p {
color: #000000;  /* Set text color for paragraphs */
font-size: 20px;  /* Set font size for paragraphs */
font-weight: bold;  /* Make paragraphs bold */
}
.action-button {
background-color: #76B947;  /* Set background color for action buttons */
color: black;  /* Set text color for action buttons */
border: 3px solid #000000;  /* Add border for action buttons */
border-radius: 5px;  /* Round corners of action buttons */
padding: 10px 20px;  /* Add padding inside action buttons */
font-size: 20px;  /* Set font size for action buttons */
font-weight: bold;  /* Set text bold */
}
"))
),
# Title displayed at the top of the app
div(class = "title", "Impact of Age on the Speed of Constructing a Tower in 30 Seconds"), br(), # Displays the title with styling
# Define layout of the page with a sidebar and a main panel
sidebarLayout(
sidebarPanel(
class = "sidebar",  # Apply custom class for styling the sidebar
numericInput("age", "How old are you?", value = 5, min = 1, max = 100), # Numeric input for user's age
numericInput("blocks", "How many blocks?", value = 0, min = 0, max = 20), # How many blocks standing (1-20)
selectInput("color", "What's your favourite colour?", # Pick a colour from options
choices = c("Pink" = "#F39",  # Bright pink, highly distinguishable
"Blue" = "#1E90FF",  # Bright blue, stands out well
"Green" = "#81B622",  # Soft green with good contrast
"Red" = "#DE0013",  # Intense red, very distinguishable
"Purple" = "#800080",  # Deep purple, contrasting with other colors
"Orange" = "#FFA500")),  # Vibrant orange, easy to spot
actionButton("add", "Plot Data"),  # Button to Plot Data
br(), br(),
img(src = "Data collection.jpg", height = "400px", alt = "Tumbling toy blocks"),# Image displayed in the sidebar
# img(src = "https://tinyurl.com/ycxrhr4d", height = "400px", width = "300px", alt = "Tumbling toy blocks"), # Image displayed in the sidebar
br(), br(),),
# Main panel to display the scatter plot
mainPanel(
width = 8,  # Adjust the main panel width to fill more space
plotlyOutput("scatterPlot")  # Placeholder for the interactive scatter plot
)
))
# server_2 logic to handle user inputs and generate outputs
server_2 <- function(input, output, session) {
# Create a reactive value to store the data for the plot
data <- reactiveVal(data.frame(Age = numeric(),
Blocks = numeric(), Color = character(), stringsAsFactors = FALSE))
# When the "Add to plot" button is clicked, update the data
observeEvent(input$add, {
# Create a new row from the user inputs
new_row <- data.frame(Age = input$age,
Blocks = input$blocks, Color = input$color, stringsAsFactors = FALSE)
# Append the new row to the existing data
data(rbind(data(), new_row))  # Update the reactive value with the new data
})
# Generate and render the scatter plot when the data changes
=======
panel.grid.minor = element_line(color = "#000000"),  # Customize minor grid lines
scale_y_continuous(breaks = c(0, 20))) }) # Set y-axis breaks
# Generate the interactive scatter plot
>>>>>>> Stashed changes
output$scatterPlot <- renderPlotly({
# Retrieve the current data
plot_data <- data()
# Create the ggplot scatter plot
<<<<<<< Updated upstream
p <- ggplot(plot_data, aes(y = Blocks, x = factor(Age), color = Color,
text = paste("<br>Age:", Age, "<br>Blocks:", Blocks))) +
=======
p <- ggplot(plot_data, aes(y = blocks, x = factor(age), color = color,
text = paste("<br>Age:", age, "<br>Blocks:", blocks))) +
>>>>>>> Stashed changes
geom_point(size = 6, shape = 21, fill = plot_data$Color) +  # Add points to the plot with customized size and color
scale_color_identity() +  # Use the exact color values provided (no automatic scaling)
theme_minimal(base_size = 15) +  # Apply a minimal theme to the plot
labs(y = "Number of Blocks", x = "Age") +  # Set labels for axes
theme(plot.title = element_text(face = "bold", size = 20, color = "#000000"),  # Customize plot title style
axis.title = element_text(face = "bold", size = 16),  # Customize axis title style
legend.position = "none",  # Hide legend
panel.background = element_rect(fill = "#C7CED6"),  # Set panel background color
plot.background = element_rect(fill = "#C7CED6"),  # Set overall plot background color
panel.grid.major = element_line(color = "#000000"),  # Customize major grid lines
<<<<<<< Updated upstream
panel.grid.minor = element_line(color = "#000000")) +  # Customize minor grid lines
scale_y_continuous(breaks = c(0, 20)) +  # Set y-axis breaks
scale_x_continuous(breaks = c(1, 100))  # Set x-axis breaks
# Convert the ggplot to a Plotly object for interactivity and set custom tooltips
ggplotly(p, tooltip = "text")
})
}
# Run the Shiny app
shinyApp(ui = ui_2, server = server_2)
# UI (User Interface) Setup
ui <- fluidPage(
# Define custom styles/theme for app page
tags$head(
tags$style(HTML("
body {
background-color: #C7CED6;  /* Set background color of the body */
font-family: 'Lucida Console', Monaco, monospace;  /* Set font family for the page */
}
.sidebar {
background-color: #B23AEE;  /* Set background color for sidebar */
padding: 20px;  /* Add padding inside the sidebar */
border: 3px solid #000000;  /* Add border to sidebar */
border-radius: 10px;  /* Round corners of the sidebar */
}
.title {
color: #000000;  /* Set text color for title */
font-size: 40px;  /* Set font size for title */
font-weight: bold;  /* Make title bold */
text-align: center;  /* Center-align the title text */
border: 3px solid #000000;  /* Add border around the title */
border-radius: 10px;  /* Round corners of the title */
padding: 10px;  /* Add padding inside the title */
background-color: #B23AEE;  /* Set background color for the title */
box-shadow: 2px 2px 8px rgba(0,0,0,0.3);  /* Add shadow to the title */
}
h3 {
color: #000000;  /* Set text color for h3 elements */
font-size: 20px;  /* Set font size for h3 elements */
font-weight: bold;  /* Set text bold */
}
p {
color: #000000;  /* Set text color for paragraphs */
font-size: 20px;  /* Set font size for paragraphs */
font-weight: bold;  /* Make paragraphs bold */
}
.action-button {
background-color: #76B947;  /* Set background color for action buttons */
color: black;  /* Set text color for action buttons */
border: 3px solid #000000;  /* Add border for action buttons */
border-radius: 5px;  /* Round corners of action buttons */
padding: 10px 20px;  /* Add padding inside action buttons */
font-size: 20px;  /* Set font size for action buttons */
font-weight: bold;  /* Set text bold */
}
"))
),
# Title displayed at the top of the app
div(class = "title", "Impact of Age on the Speed of Constructing a Tower in 30 Seconds"), br(), # Displays the title with styling
# Define layout of the page with a sidebar and a main panel
sidebarLayout(
sidebarPanel(
class = "sidebar",  # Apply custom class for styling the sidebar
numericInput("age", "How old are you?", value = 5, min = 1, max = 100), # Numeric input for user's age
numericInput("blocks", "How many blocks?", value = 0, min = 0, max = 20), # How many blocks standing (1-20)
selectInput("color", "What's your favourite colour?", # Pick a colour from options
choices = c("Pink" = "#F39",  # Bright pink, highly distinguishable
"Blue" = "#1E90FF",  # Bright blue, stands out well
"Green" = "#81B622",  # Soft green with good contrast
"Red" = "#DE0013",  # Intense red, very distinguishable
"Purple" = "#800080",  # Deep purple, contrasting with other colors
"Orange" = "#FFA500")),  # Vibrant orange, easy to spot
actionButton("add", "Plot Data"),  # Button to Plot Data
br(), br(),
img(src = "Data_collection.png", height = "400px", alt = "Tumbling toy blocks"),# Image displayed in the sidebar
# img(src = "https://tinyurl.com/ycxrhr4d", height = "400px", width = "300px", alt = "Tumbling toy blocks"), # Image displayed in the sidebar
br(), br(),),
# Main panel to display the scatter plot
mainPanel(
width = 8,  # Adjust the main panel width to fill more space
plotlyOutput("scatterPlot")  # Placeholder for the interactive scatter plot
)
))
# Combined server logic
server <- function(input, output, session) {
# Define the path for saving the inputs as a CSV
tower <- "data/nsf2025_data_collection.csv"
# Load existing data if it exists
if (file.exists(tower)) {
tower_data <- read.csv(tower)
} else {
tower_data <- data.frame(Age = numeric(),
Blocks = numeric(), Color = character())
}
# Create a reactive dataframe to store user inputs
data <- reactiveVal(tower_data)
# Update the dataframe when the action button is clicked
observeEvent(input$add, {
new_row <- data.frame(Age = input$age,
Blocks = input$blocks, Color = input$color, stringsAsFactors = FALSE)
updated_data <- rbind(data(), new_row)
data(updated_data)
# Save updated data to CSV
write.csv(updated_data, tower, row.names = FALSE)
})
# Generate and render the scatter plot when the data changes
output$scatterPlot <- renderPlotly({
# Retrieve the current data
plot_data <- data()
# Create the ggplot scatter plot
p <- ggplot(plot_data, aes(y = Blocks, x = factor(Age), color = Color,
text = paste("<br>Age:", Age, "<br>Blocks:", Blocks))) +
geom_point(size = 6, shape = 21, fill = plot_data$Color) +  # Add points to the plot with customized size and color
scale_color_identity() +  # Use the exact color values provided (no automatic scaling)
theme_minimal(base_size = 15) +  # Apply a minimal theme to the plot
labs(y = "Number of Blocks", x = "Age") +  # Set labels for axes
theme(plot.title = element_text(face = "bold", size = 20, color = "#000000"),  # Customize plot title style
axis.title = element_text(face = "bold", size = 16),  # Customize axis title style
legend.position = "none",  # Hide legend
panel.background = element_rect(fill = "#C7CED6"),  # Set panel background color
plot.background = element_rect(fill = "#C7CED6"),  # Set overall plot background color
panel.grid.major = element_line(color = "#000000"),  # Customize major grid lines
<<<<<<< Updated upstream
panel.grid.minor = element_line(color = "#000000")) +  # Customize minor grid lines
scale_y_continuous(breaks = c(0, 20)) +  # Set y-axis breaks
scale_x_continuous(breaks = c(1, 100))  # Set x-axis breaks
=======
panel.grid.minor = element_line(color = "#000000"))  # Customize minor grid lines
>>>>>>> Stashed changes
# Convert the ggplot to a Plotly object for interactivity and set custom tooltips
ggplotly(p, tooltip = "text")
})
}
# Run the Shiny app
<<<<<<< Updated upstream
shinyApp(ui = ui_2, server = server_2)
# UI (User Interface) Setup
ui_2 <- fluidPage(
# Define custom styles/theme for app page
tags$head(
tags$style(HTML("
body {
background-color: #C7CED6;  /* Set background color of the body */
font-family: 'Lucida Console', Monaco, monospace;  /* Set font family for the page */
}
.sidebar {
background-color: #F8D210;  /* Set background color for sidebar */
padding: 20px;  /* Add padding inside the sidebar */
border: 3px solid #000000;  /* Add border to sidebar */
border-radius: 10px;  /* Round corners of the sidebar */
}
.title {
color: #000000;  /* Set text color for title */
font-size: 40px;  /* Set font size for title */
font-weight: bold;  /* Make title bold */
text-align: center;  /* Center-align the title text */
border: 3px solid #000000;  /* Add border around the title */
border-radius: 10px;  /* Round corners of the title */
padding: 10px;  /* Add padding inside the title */
background-color: #F8D210;  /* Set background color for the title */
box-shadow: 2px 2px 8px rgba(0,0,0,0.3);  /* Add shadow to the title */
}
h3 {
color: #000000;  /* Set text color for h3 elements */
font-size: 20px;  /* Set font size for h3 elements */
font-weight: bold;  /* Set text bold */
}
p {
color: #000000;  /* Set text color for paragraphs */
font-size: 20px;  /* Set font size for paragraphs */
font-weight: bold;  /* Make paragraphs bold */
}
.action-button {
background-color: #76B947;  /* Set background color for action buttons */
color: black;  /* Set text color for action buttons */
border: 3px solid #000000;  /* Add border for action buttons */
border-radius: 5px;  /* Round corners of action buttons */
padding: 10px 20px;  /* Add padding inside action buttons */
font-size: 20px;  /* Set font size for action buttons */
font-weight: bold;  /* Set text bold */
}
"))
),
# Title displayed at the top of the app
div(class = "title", "60-SECOND SKYSCRAPER!"), br(), # Displays the title "60 SECOND SKYSCRAPER!" with styling
# Define layout of the page with a sidebar and a main panel
sidebarLayout(
sidebarPanel(
class = "sidebar",  # Apply custom class for styling the sidebar
numericInput("age", "How old are you?", value = 5, min = 1, max = 100), # Numeric input for user's age
numericInput("blocks", "How many blocks?", value = 0, min = 0, max = 20), # How many blocks standing (1-20)
selectInput("color", "What's your favourite colour?", # Pick a colour from options
choices = c("Pink" = "#F39",  # Bright pink, highly distinguishable
"Blue" = "#1E90FF",  # Bright blue, stands out well
"Green" = "#81B622",  # Soft green with good contrast
"Red" = "#DE0013",  # Intense red, very distinguishable
"Purple" = "#800080",  # Deep purple, contrasting with other colors
"Orange" = "#FFA500")),  # Vibrant orange, easy to spot
actionButton("add", "Plot Data"),  # Button to Plot Data
br(), br(),
# img(src = "Data_collection.png", height = "400px", alt = "Tumbling toy blocks"),# Image displayed in the sidebar
# img(src = "https://tinyurl.com/ycxrhr4d", height = "400px", width = "300px", alt = "Tumbling toy blocks"), # Image displayed in the sidebar
br(), br(),),
# Main panel to display the scatter plot
mainPanel(
width = 8,  # Adjust the main panel width to fill more space
plotlyOutput("scatterPlot")  # Placeholder for the interactive scatter plot
)
))
# Combined server logic
server <- function(input, output, session) {
# Define the path for saving the inputs as a CSV
tower <- "data/nsf2025_data_collection.csv"
# Load existing data if it exists
if (file.exists(tower)) {
tower_data <- read.csv(tower)
} else {
tower_data <- data.frame(Age = numeric(),
Blocks = numeric(), Color = character())
}
# Create a reactive dataframe to store user inputs
data <- reactiveVal(tower_data)
# Update the dataframe when the action button is clicked
observeEvent(input$add, {
new_row <- data.frame(Age = input$age,
Blocks = input$blocks, Color = input$color, stringsAsFactors = FALSE)
updated_data <- rbind(data(), new_row)
data(updated_data)
# Save updated data to CSV
write.csv(updated_data, tower, row.names = FALSE)
})
# Generate and render the scatter plot when the data changes
output$scatterPlot <- renderPlotly({
# Retrieve the current data
plot_data <- data()
# Create the ggplot scatter plot
p <- ggplot(plot_data, aes(y = Blocks, x = factor(Age), color = Color,
text = paste("<br>Age:", Age, "<br>Blocks:", Blocks))) +
geom_point(size = 6, shape = 21, fill = plot_data$Color) +  # Add points to the plot with customized size and color
scale_color_identity() +  # Use the exact color values provided (no automatic scaling)
theme_minimal(base_size = 15) +  # Apply a minimal theme to the plot
labs(y = "Number of Blocks", x = "Age") +  # Set labels for axes
theme(plot.title = element_text(face = "bold", size = 20, color = "#000000"),  # Customize plot title style
axis.title = element_text(face = "bold", size = 16),  # Customize axis title style
legend.position = "none",  # Hide legend
panel.background = element_rect(fill = "#C7CED6"),  # Set panel background color
plot.background = element_rect(fill = "#C7CED6"),  # Set overall plot background color
panel.grid.major = element_line(color = "#000000"),  # Customize major grid lines
<<<<<<< Updated upstream
panel.grid.minor = element_line(color = "#000000")) +  # Customize minor grid lines
scale_y_continuous(breaks = c(0, 20)) +  # Set y-axis breaks
scale_x_continuous(breaks = c(1, 100))  # Set x-axis breaks
=======
panel.grid.minor = element_line(color = "#000000"))  # Customize minor grid lines
>>>>>>> Stashed changes
# Convert the ggplot to a Plotly object for interactivity and set custom tooltips
ggplotly(p, tooltip = "text")
})
}
# Run the Shiny app
<<<<<<< Updated upstream
shinyApp(ui = ui_2, server = server_2)
library(shiny)
library(tidyverse)
library(plotly)
=======
panel.grid.minor = element_line(color = "#000000"),  # Customize minor grid lines
scale_y_continuous(breaks = c(0, 20))) }) # Set y-axis breaks
# Run the Shiny app
shinyApp(ui = ui_3, server = server_3)
# Define UI and Custom Styles ---------------------------------------------
ui_3 <- fluidPage(
tags$head(
tags$style(HTML("
body {
background-color: #D8F0F0;
font-family: Arial, sans-serif;
}
.sidebar {
background-color: #7ADCF5;
padding: 20px;
border: 3px solid #19CAF6;
border-radius: 10px;
}
.title {
color: #0F55A3;
font-size: 40px;
font-weight: bold;
text-align: center;
border: 3px solid #19CAF6;
border-radius: 10px;
padding: 10px;
background-color: #7ADCF5;
box-shadow: 2px 2px 8px rgba(0,0,0,0.3);
}
h3 {
color: #4CAF50;
font-size: 20px;
}
p {
color: #0F55A3;
font-size: 18px;
font-weight: bold;
}
.action-button {
background-color: #0F55A3;
color: white;
border: none;
border-radius: 5px;
padding: 10px 20px;
font-size: 16px;
}
"))
),
# Title
div(class = "title", "60 SECOND SKYSCRAPER"), br(),
# Sidebar layout
sidebarLayout(
sidebarPanel(
class = "sidebar",
numericInput("age", "How old are you?", value = 5, min = 1, max = 100),
numericInput("time", "How fast were you?", value = 0, min = 0),
selectInput("color", "What's your favourite colour?",
choices = c("Yellow Team" = "#FFD700",
"Blue Team" = "#1E90FF",
"Green Team" = "#4EBA8B",
"Red Team" = "#DE0013")),
actionButton("add", "Add to plot"),
br(), br(),
img(src = "https://s3-eu-west-1.amazonaws.com/images.linnlive.com/83485047ad86c6e2cdb6a8d751245bb9/d1866711-b5a0-4a1f-9a84-b6546bea7b79.jpg", height = "200px", alt = "Tumbling toy blocks"),
br(), br(),
),
# Main panel to display the plot
mainPanel(
plotlyOutput("scatterPlot")
)
)
)
>>>>>>> Stashed changes
# ___________________________________________________________________________________________________________________----
# Define UI and Custom Styles ----
# UI (User Interface) Setup
ui <- fluidPage(
# Define custom styles/theme for app page
tags$head(
tags$style(HTML("
body {
background-color: #C7CED6;  /* Set background color of the body */
font-family: 'Lucida Console', Monaco, monospace;  /* Set font family for the page */
}
.sidebar {
background-color: #B23AEE;  /* Set background color for sidebar */
padding: 20px;  /* Add padding inside the sidebar */
border: 3px solid #000000;  /* Add border to sidebar */
border-radius: 10px;  /* Round corners of the sidebar */
}
.title {
color: #000000;  /* Set text color for title */
font-size: 40px;  /* Set font size for title */
font-weight: bold;  /* Make title bold */
text-align: center;  /* Center-align the title text */
border: 3px solid #000000;  /* Add border around the title */
border-radius: 10px;  /* Round corners of the title */
padding: 10px;  /* Add padding inside the title */
background-color: #B23AEE;  /* Set background color for the title */
box-shadow: 2px 2px 8px rgba(0,0,0,0.3);  /* Add shadow to the title */
}
h3 {
color: #000000;  /* Set text color for h3 elements */
font-size: 20px;  /* Set font size for h3 elements */
font-weight: bold;  /* Set text bold */
}
p {
color: #000000;  /* Set text color for paragraphs */
font-size: 20px;  /* Set font size for paragraphs */
font-weight: bold;  /* Make paragraphs bold */
}
.action-button {
background-color: #76B947;  /* Set background color for action buttons */
color: black;  /* Set text color for action buttons */
border: 3px solid #000000;  /* Add border for action buttons */
border-radius: 5px;  /* Round corners of action buttons */
padding: 10px 20px;  /* Add padding inside action buttons */
font-size: 20px;  /* Set font size for action buttons */
font-weight: bold;  /* Set text bold */
}
"))
),
# Title displayed at the top of the app
div(class = "title", "Impact of Age on the Speed of Constructing a Tower in 30 Seconds"), br(), # Displays the title with styling
# Define layout of the page with a sidebar and a main panel
sidebarLayout(
sidebarPanel(
class = "sidebar",  # Apply custom class for styling the sidebar
numericInput("age", "How old are you?", value = 5, min = 1, max = 100), # Numeric input for user's age
numericInput("blocks", "How many blocks?", value = 0, min = 0, max = 20), # How many blocks standing (1-20)
selectInput("color", "What's your favourite colour?", # Pick a colour from options
choices = c("Pink" = "#F39",  # Bright pink, highly distinguishable
"Blue" = "#1E90FF",  # Bright blue, stands out well
"Green" = "#81B622",  # Soft green with good contrast
"Red" = "#DE0013",  # Intense red, very distinguishable
"Purple" = "#800080",  # Deep purple, contrasting with other colors
"Orange" = "#FFA500")),  # Vibrant orange, easy to spot
actionButton("add", "Plot Data"),  # Button to Plot Data
br(), br() , # Image displayed in the sidebar
br(), br(),),
# Main panel to display the scatter plot
mainPanel(
width = 8,  # Adjust the main panel width to fill more space
plotlyOutput("scatterPlot")  # Placeholder for the interactive scatter plot
)
))
# Combined server logic
server <- function(input, output, session) {
# Define the path for saving the inputs as a CSV
tower <- "data/nsf2025_data_collection.csv"
# Load existing data if it exists
if (file.exists(tower)) {
tower_data <- read.csv(tower)
} else {
tower_data <- data.frame(Age = numeric(),
Blocks = numeric(), Color = character())
}
# Create a reactive dataframe to store user inputs
data <- reactiveVal(tower_data)
# Update the dataframe when the action button is clicked
observeEvent(input$add, {
new_row <- data.frame(Age = input$age,
Blocks = input$blocks, Color = input$color, stringsAsFactors = FALSE)
updated_data <- rbind(data(), new_row)
data(updated_data)
# Save updated data to CSV
write.csv(updated_data, tower, row.names = FALSE)
})
# Generate and render the scatter plot when the data changes
output$scatterPlot <- renderPlotly({
# Retrieve the current data
plot_data <- data()
# Create the ggplot scatter plot
p <- ggplot(plot_data, aes(y = Blocks, x = factor(Age), color = Color,
text = paste("<br>Age:", Age, "<br>Blocks:", Blocks))) +
geom_point(size = 6, shape = 21, fill = plot_data$Color) +  # Add points to the plot with customized size and color
scale_color_identity() +  # Use the exact color values provided (no automatic scaling)
theme_minimal(base_size = 15) +  # Apply a minimal theme to the plot
labs(y = "Number of Blocks", x = "Age") +  # Set labels for axes
theme(plot.title = element_text(face = "bold", size = 20, color = "#000000"),  # Customize plot title style
axis.title = element_text(face = "bold", size = 16),  # Customize axis title style
legend.position = "none",  # Hide legend
panel.background = element_rect(fill = "#C7CED6"),  # Set panel background color
plot.background = element_rect(fill = "#C7CED6"),  # Set overall plot background color
panel.grid.major = element_line(color = "#000000"),  # Customize major grid lines
panel.grid.minor = element_line(color = "#000000"))  # Customize minor grid lines
# Convert the ggplot to a Plotly object for interactivity and set custom tooltips
ggplotly(p, tooltip = "text")
})
}
# Run the Shiny app
<<<<<<< Updated upstream
shinyApp(ui = ui_2, server = server_2)
# Run the Shiny app
shinyApp(ui = ui_2, server = server_2)
=======
shinyApp(ui = ui, server = server)
>>>>>>> Stashed changes
=======
shinyApp(ui = ui, server = server)
>>>>>>> Stashed changes
=======
shinyApp(ui = ui, server = server)
>>>>>>> Stashed changes
