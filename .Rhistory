p <- ggplot(plot_data, aes(y = Blocks, x = Age, color = Age,
text = paste("<br>Age:", Age, "<br>Blocks:", Blocks))) +
geom_jitter(size = 5) +
scale_color_manual(values = custom_colors) +
theme_classic(base_size = 14) +
labs(
title = "Relationship between age and tower heights",
y = "Number of Blocks (HEIGHT)",
x = "Age"
) +
scale_y_continuous(
limits = c(0, 13),
breaks = 0:12,
expand = c(0, 0) # Prevent gaps
) +
scale_x_discrete(
limits = c("<6", "7", "8", "9", "10", "11", "12", "13-19", "20>"),
labels = c(
"<6" = "<6", "7" = "7", "8" = "8", "9" = "9",
"10" = "10", "11" = "11", "12" = "12", "13-19" = "13-19", "20>" = "20>"
)
) +
theme(
plot.title = element_text(
face = "bold",
size = 20,
color = "#000000",
margin = margin(b = 20), # Adds margin below the plot title
hjust = 0 # Aligns the title to the left
),
axis.title.x = element_text(
face = "bold",
size = 16,
margin = margin(t = 30) # Adds margin above the x-axis title
),
axis.title.y = element_text(
face = "bold",
size = 16,
margin = margin(r = 30) # Adds margin to the right of the y-axis title
),
axis.text.x = element_text(face = "bold", size = 14),
axis.text.y = element_text(face = "bold", size = 14),
legend.position = "none",
panel.background = element_rect(fill = "#F0FFFF"),
plot.background = element_rect(fill = "#F0FFFF"),
panel.grid.major = element_line(color = "grey"),
panel.grid.minor = element_line(color = "grey")
)
}
# Convert the ggplot to a Plotly object for interactivity
ggplotly(p, tooltip = "text") %>%
layout(autosize = TRUE)
})
}
# SHINY APP ----
# Run the Shiny app
shinyApp(ui = super1, server = super_server1)
# VIOLET + AQUA
# CODE ----
super1 <- fluidPage(
# Define custom styles/theme for app page
tags$head(
tags$style(HTML("
body {
background-color: #F5F5F5;  /* Set background color of the body */
font-family: 'Lucida Sans Typewriter', Monaco, monospace;  /* Set font family for the page */
}
.sidebar {
color: black; /* Set text color to white */
background-color: #71E7E0; /* Aqua background */
padding: 20px; /* Padding inside the sidebar */
border: 5px solid #000000; /* Black border */
border-radius: 10px; /* Rounded corners */
font-size: 25px; /* Sidebar text size */
font-weight: bold; /* Bold text */
height: 100%; /* Match the height dynamically */
display: flex; /* Optional: to align content vertically */
flex-direction: column; /* Stack items vertically */
justify-content: space-between; /* Adjust spacing if needed */
}
.title {
color: white;  /* Set text color for title */
font-weight: bold;  /* Make title bold */
text-align: center;  /* Center-align the title text */
border: 6px solid black;  /* Add border around the title */
border-radius: 10px;  /* Round corners of the title */
padding: 20px;  /* Add padding inside the title */
background-color: #A16AE8;  /* Set background color for the title */
box-shadow: 2px 2px 8px rgba(0,0,0,0.3);  /* Add shadow to the title */
}
h3 {
color: white;  /* Set text color for h3 elements */
font-size: 30px;  /* Set font size for h3 elements */
font-weight: bold;  /* Set text bold */
}
p {
color: white;  /* Set text color for paragraphs */
font-size: 30px;  /* Set font size for paragraphs */
font-weight: bold;  /* Make paragraphs bold */
}
.action-button {
background-color: #F652A0;  /* Set background color for action buttons */
color: black;  /* Set text color for action buttons */
border: 3px solid black;  /* Add border for action buttons */
border-radius: 5px;  /* Round corners of action buttons */
padding: 10px 20px;  /* Add padding inside action buttons */
font-size: 25px;  /* Set font size for action buttons */
font-weight: bold;  /* Set text bold */
border: 2px solid black; /* Add black border to text */
}
"))
),
# TITLE ----
# alternative titles ----
# "Speedy Skyscrapers<br><br>How many blocks can people of different ages stack in 30 seconds before the tower falls?"
# "Speedy Skyscrapers<br><br>Can you beat the clock?<br><br>Stack as many blocks as you can before 30 seconds runs out‚Äîand the tower topples!"
# "Speedy Skyscrapers<br><br>How many blocks can different age groups pile up in 30 Seconds before disaster strikes?"
# "Speedy Skyscrapers<br>See how many blocks you can stack in 30 seconds before gravity wins."
# Code to embed title ----
div(class = "title",
style = "line-height: 1.25; font-family: 'Lucida Sans Typewriter', Monaco, monospace;",
HTML(
"<span style='font-size: 40px; font-weight: bold;'> ‚è±Ô∏è Speedy Skyscrapers üè¢ </span><br><br>
<span style='font-size: 30px;'>üß± See how many blocks you can stack in 30 seconds before gravity wins üåü‚¨áÔ∏è</span>"
)), br(),
# Define layout of the page with a sidebar and a main panel
sidebarPanel(
class = "sidebar",
width = 3,  # Sidebar width
sliderInput("blocks", "üß± Number of Blocks", min = 1, max = 12, value = 5),
radioButtons("age", "üìÜ AgeÔ∏è",
choices = c("<6" = "<6",
"7" = "7",
"8" = "8",
"9" = "9",
"10" = "10",
"11" = "11",
"12" = "12",
"13-19" = "13-19",
"20>" = "20>")),
actionButton("add", "üìà Plot Data üìâ"),
br(), br()
),
mainPanel(
div(
style = "height: 100%; overflow: auto;
width: 100%;
border: 5px solid #000000;
border-radius: 10px;
padding: 30px;
margin: 10px; /* Add a margin around the plot container */
background-color: #F0FFFF;",
plotlyOutput("scatterPlot", height = "700px", width = "100%")
)
)
)
# SERVER [Render scatterplot] ----
# Server logic to handle user inputs and generate outputs
super_server1 <- function(input, output, session) {
# Define the path for saving the inputs as a CSV
tower <- "data/sss2025_data.csv" # Specify data path
# Load existing data if it exists
if (file.exists(tower)) {
tower_data <- read.csv(tower)
} else {
tower_data <- data.frame(Age = character(), Blocks = numeric(), stringsAsFactors = FALSE)
}
# Create a reactive dataframe to store user inputs
data <- reactiveVal(tower_data)
# Update the dataframe when the action button is clicked
observeEvent(input$add, {
new_row <- data.frame(Age = input$age, Blocks = input$blocks, stringsAsFactors = FALSE)
updated_data <- rbind(data(), new_row)
data(updated_data)
# Save updated data to CSV
write.csv(updated_data, tower, row.names = FALSE)
})
# Generate and render the scatter plot when the data changes
output$scatterPlot <- renderPlotly({
# Retrieve the current data
plot_data <- data()
# SCATTERPLOT CODE ----
# Check if the dataset is empty
if (nrow(plot_data) == 0) {
# If no data is collected, display an empty plot
p <- ggplot(plot_data, aes(y = Blocks, x = Age, color = Age,
text = paste("<br>Age:", Age, "<br>Blocks:", Blocks))) +
geom_jitter(size = 5) +
scale_color_manual(values = custom_colors) +
theme_classic(base_size = 14) +
labs(
title = "Relationship between age and tower heights",
y = "Number of Blocks (HEIGHT)",
x = "Age"
) +
scale_y_continuous(
limits = c(0, 13),
breaks = 0:12,
expand = c(0, 0) # Prevent gaps
) +
scale_x_discrete(
limits = c("<6", "7", "8", "9", "10", "11", "12", "13-19", "20>"),
labels = c(
"<6" = "<6", "7" = "7", "8" = "8", "9" = "9",
"10" = "10", "11" = "11", "12" = "12", "13-19" = "13-19", "20>" = "20>"
)
) +
theme(
plot.title = element_text(
face = "bold",
size = 20,
color = "#000000",
margin = margin(b = 20), # Adds margin below the plot title
hjust = 0 # Aligns the title to the left
),
axis.title.x = element_text(
face = "bold",
size = 16,
margin = margin(t = 30) # Adds margin above the x-axis title
),
axis.title.y = element_text(
face = "bold",
size = 16,
margin = margin(r = 30) # Adds margin to the right of the y-axis title
),
axis.text.x = element_text(face = "bold", size = 14),
axis.text.y = element_text(face = "bold", size = 14),
legend.position = "none",
panel.background = element_rect(fill = "#F0FFFF"),
plot.background = element_rect(fill = "#F0FFFF"),
panel.grid.major = element_line(color = "grey"),
panel.grid.minor = element_line(color = "grey")
)
} else {
# If data is collected, create the scatter plot
plot_data$Age <- factor(plot_data$Age, levels = c(
"<6", "7", "8", "9", "10", "11", "12", "13-19", "20>"
))
p <- ggplot(plot_data, aes(y = Blocks, x = Age, color = Age,
text = paste("<br>Age:", Age, "<br>Blocks:", Blocks))) +
geom_jitter(size = 5) +
scale_color_manual(values = custom_colors) +
theme_classic(base_size = 14) +
labs(
title = "Relationship between age and tower heights",
y = "Number of Blocks (HEIGHT)",
x = "Age"
) +
scale_y_continuous(
limits = c(0, 13),
breaks = 0:12,
expand = c(0, 0) # Prevent gaps
) +
scale_x_discrete(
limits = c("<6", "7", "8", "9", "10", "11", "12", "13-19", "20>"),
labels = c(
"<6" = "<6", "7" = "7", "8" = "8", "9" = "9",
"10" = "10", "11" = "11", "12" = "12", "13-19" = "13-19", "20>" = "20>"
)
) +
theme(
plot.title = element_text(
face = "bold",
size = 20,
color = "#000000",
margin = margin(b = 20), # Adds margin below the plot title
hjust = 0 # Aligns the title to the left
),
axis.title.x = element_text(
face = "bold",
size = 16,
margin = margin(t = 30) # Adds margin above the x-axis title
),
axis.title.y = element_text(
face = "bold",
size = 16,
margin = margin(r = 30) # Adds margin to the right of the y-axis title
),
axis.text.x = element_text(face = "bold", size = 14),
axis.text.y = element_text(face = "bold", size = 14),
legend.position = "none",
panel.background = element_rect(fill = "#F0FFFF"),
plot.background = element_rect(fill = "#F0FFFF"),
panel.grid.major = element_line(color = "grey"),
panel.grid.minor = element_line(color = "grey")
)
}
# Convert the ggplot to a Plotly object for interactivity
ggplotly(p, tooltip = "text") %>%
layout(autosize = TRUE)
})
}
# SHINY APP ----
# Run the Shiny app
shinyApp(ui = super1, server = super_server1)
# PACKAGES ----
library(tidyverse)
library(RColorBrewer) # colour pallets
library(colorBlindness) # colour blindness checker
# SET PLOT SIZINGS ----
# Define your sizes
title <- 20 # title size
subtitle <- 14 # subtitle size
title_size <- 16 # set axis title size
text_size <- 12 # set axis text size
# Custom theme function
custom_theme <- function() {
theme(
legend.position = "none",
plot.title = element_text(size = title, face = "bold", color = "black"),
plot.subtitle = element_text(size = subtitle, face = "bold", color = "black"),
axis.text.x = element_text(size = text_size, face = "bold", color = "black"),     # X-axis text
axis.text.y = element_text(size = text_size, face = "bold", color = "black"),     # Y-axis text
axis.title.x = element_text(size = title_size, face = "bold", color = "black", margin = margin(10, 10, 10, 10)),   # X-axis title
axis.title.y = element_text(size = title_size, face = "bold", color = "black", margin = margin(10, 10, 10, 10)))  # Y-axis title
}
# LOAD DATA ----
sss25 <- read_csv("data/sss2025_data.csv")
glimpse(sss25)
summary(sss25)
sss25$Age <- factor(sss25$Age, levels = c(
"<6", "7", "8", "9", "10", "11", "12", "13-19", "20>"))
glimpse(sss25)
age_plot2 <- sss25 %>%
ggplot(aes(x = Age, y = Blocks)) +
geom_jitter(width = 0.35, size = 4) +
theme_bw() +
labs(
title = "Super Science Saturday 2025: Speedy Skyscrapers",
subtitle = "Performance of participants in constructing a 12-block tower within a 30-second interval before gravity wins (n=158).",
y = "Height (Number of blocks) after 30 seconds",
x = "Age group") +
theme(
plot.caption = element_text(hjust = 0, vjust = 1, size = text_size) # Align caption to the bottom left
) +
scale_y_continuous(limits = c(0, 10.5), breaks = 0:10.5) + # Set y-axis limits and breaks
scale_x_discrete(labels = c(
"<6", "7", "8", "9", "10", "11", "12", "13-19", "20>")) +
custom_theme()
age_plot2
age_plot2 <- sss25 %>%
ggplot(aes(x = Age, y = Blocks)) +
geom_jitter(width = 0.35, size = 3) +
theme_bw() +
labs(
title = "Super Science Saturday 2025: Speedy Skyscrapers",
subtitle = "Performance of participants in constructing a 12-block tower within a 30-second interval before gravity wins (n=158).",
y = "Height (Number of blocks after 30 sec)",
x = "Age group") +
theme(
plot.caption = element_text(hjust = 0, vjust = 1, size = text_size) # Align caption to the bottom left
) +
scale_y_continuous(limits = c(0, 10.5), breaks = 0:10.5) + # Set y-axis limits and breaks
scale_x_discrete(labels = c(
"<6", "7", "8", "9", "10", "11", "12", "13-19", "20>")) +
custom_theme()
age_plot2
age_plot2 <- sss25 %>%
ggplot(aes(x = Age, y = Blocks)) +
geom_jitter(width = 0.35, size = 3) +
theme_classic() +
labs(
title = "Super Science Saturday 2025: Speedy Skyscrapers",
subtitle = "Performance of participants in constructing a 12-block tower within a 30-second interval before gravity wins (n=158).",
y = "Height (Number of blocks after 30 sec)",
x = "Age group") +
theme(
plot.caption = element_text(hjust = 0, vjust = 1, size = text_size) # Align caption to the bottom left
) +
scale_y_continuous(limits = c(0, 10.5), breaks = 0:10.5) + # Set y-axis limits and breaks
scale_x_discrete(labels = c(
"<6", "7", "8", "9", "10", "11", "12", "13-19", "20>")) +
custom_theme()
age_plot2
age_plot2 <- sss25 %>%
ggplot(aes(x = Age, y = Blocks)) +
geom_jitter(width = 0.35, size = 3) +
theme_classic() +
labs(
title = "Super Science Saturday 2025: Speedy Skyscrapers",
subtitle = "Performance of participants in constructing a 12-block tower within a 30-second interval before gravity wins (n=158).",
y = "Height (Number of blocks after 30 sec)",
x = "Age group") +
theme(
plot.caption = element_text(hjust = 0, vjust = 1, size = text_size) # Align caption to the bottom left
) +
scale_y_continuous(limits = c(0, 12.5), breaks = 0:12.5) + # Set y-axis limits and breaks
scale_x_discrete(labels = c(
"<6", "7", "8", "9", "10", "11", "12", "13-19", "20>")) +
custom_theme()
age_plot2
age_plot2 <- sss25 %>%
ggplot(aes(x = Age, y = Blocks)) +
geom_jitter(width = 0.35, size = 3) +
theme_classic() +
labs(
title = "Super Science Saturday 2025: Speedy Skyscrapers",
subtitle = "Performance of participants in constructing a 12-block tower within a 30-second interval before gravity wins (n=158).",
y = "Height (Number of blocks after 30 sec)",
x = "Age group") +
theme(
plot.caption = element_text(hjust = 0, vjust = 1, size = text_size) # Align caption to the bottom left
) +
scale_y_continuous(limits = c(0, 12), breaks = 0:12) + # Set y-axis limits and breaks
scale_x_discrete(labels = c(
"<6", "7", "8", "9", "10", "11", "12", "13-19", "20>")) +
custom_theme()
age_plot2
age_plot2 <- sss25 %>%
ggplot(aes(x = Age, y = Blocks, color = Age)) +
geom_jitter(width = 0.35, size = 3) +
theme_classic() +
labs(
title = "Super Science Saturday 2025: Speedy Skyscrapers",
subtitle = "Performance of participants in constructing a 12-block tower within a 30-second interval before gravity wins (n=158).",
y = "Height (Number of blocks after 30 sec)",
x = "Age group") +
theme(
plot.caption = element_text(hjust = 0, vjust = 1, size = text_size) # Align caption to the bottom left
) +
scale_y_continuous(limits = c(0, 12), breaks = 0:12) + # Set y-axis limits and breaks
scale_x_discrete(labels = c(
"<6", "7", "8", "9", "10", "11", "12", "13-19", "20>")) +
custom_theme()
age_plot2
# flipped plot
age_plot_flip <- sss25 %>%
ggplot(aes(y = Age, x = Blocks, color = Age)) +
geom_jitter(width = 0.35, size = 3) +
theme_classic() +
labs(
title = "Super Science Saturday 2025: Speedy Skyscrapers",
subtitle = "Performance of participants in constructing a 12-block tower within a 30-second interval before gravity wins (n=158).",
x = "Height (Number of blocks after 30 sec)",
y = "Age group") +
theme(
plot.caption = element_text(hjust = 0, vjust = 1, size = text_size) # Align caption to the bottom left
) +
scale_x_continuous(limits = c(0, 12), breaks = 0:12) + # Set y-axis limits and breaks
scale_y_discrete(labels = c(
"<6", "7", "8", "9", "10", "11", "12", "13-19", "20>")) +
custom_theme()
age_plot_flip
# flipped plot
age_plot_flip <- sss25 %>%
ggplot(aes(y = Age, x = Blocks, color = Age)) +
geom_jitter(width = 0.4, size = 3) +
theme_classic() +
labs(
title = "Super Science Saturday 2025: Speedy Skyscrapers",
subtitle = "Performance of participants in constructing a 12-block tower within a 30-second interval before gravity wins (n=158).",
x = "Height (Number of blocks after 30 sec)",
y = "Age group") +
theme(
plot.caption = element_text(hjust = 0, vjust = 1, size = text_size) # Align caption to the bottom left
) +
scale_x_continuous(limits = c(0, 12), breaks = 0:12) + # Set y-axis limits and breaks
scale_y_discrete(labels = c(
"<6", "7", "8", "9", "10", "11", "12", "13-19", "20>")) +
custom_theme()
age_plot_flip
age_plot_box <- sss25 %>%
ggplot(aes(x = Age, y = Blocks, color = Age)) +
geom_boxplot() +
theme_classic() +
labs(
title = "Super Science Saturday 2025: Speedy Skyscrapers",
subtitle = "Performance of participants in constructing a 12-block tower within a 30-second interval before gravity wins (n=158).",
y = "Height (Number of blocks after 30 sec)",
x = "Age group") +
theme(
plot.caption = element_text(hjust = 0, vjust = 1, size = text_size) # Align caption to the bottom left
) +
scale_y_continuous(limits = c(0, 12), breaks = 0:12) + # Set y-axis limits and breaks
scale_x_discrete(labels = c(
"<6", "7", "8", "9", "10", "11", "12", "13-19", "20>")) +
custom_theme()
age_plot_box
age_plot_box <- sss25 %>%
ggplot(aes(x = Age, y = Blocks, color = Age)) +
geom_boxplot() +
theme_classic() +
labs(
title = "Super Science Saturday 2025: Speedy Skyscrapers",
subtitle = "Performance of participants in constructing a 12-block tower within a 30-second interval before gravity wins (n=158).",
y = "Height (Number of blocks after 30 sec)",
x = "Age group") +
theme(
plot.caption = element_text(hjust = 0, vjust = 1, size = text_size) # Align caption to the bottom left
) +
scale_y_continuous(limits = c(0, 15), breaks = 0:12) + # Set y-axis limits and breaks
scale_x_discrete(labels = c(
"<6", "7", "8", "9", "10", "11", "12", "13-19", "20>")) +
custom_theme()
age_plot_box
age_plot_box <- sss25 %>%
ggplot(aes(x = Age, y = Blocks, color = Age)) +
geom_boxplot() +
theme_classic() +
labs(
title = "Super Science Saturday 2025: Speedy Skyscrapers",
subtitle = "Performance of participants in constructing a 12-block tower within a 30-second interval before gravity wins (n=158).",
y = "Height (Number of blocks after 30 sec)",
x = "Age group") +
theme(
plot.caption = element_text(hjust = 0, vjust = 1, size = text_size) # Align caption to the bottom left
) +
scale_y_continuous(limits = c(0, 12), breaks = 0:12) + # Set y-axis limits and breaks
scale_x_discrete(labels = c(
"<6", "7", "8", "9", "10", "11", "12", "13-19", "20>")) +
custom_theme()
age_plot_box
