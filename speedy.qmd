---
title: "Speedy Skyscrapers: Does Age Affect Tower Building?"
format: html
editor: visual
---

```{r setup, include=FALSE}
library(shiny)
library(tidyverse)
library(plotly)
```

```{r code, include=FALSE}
# CODE ----
sss25 <- fluidPage(
  # Define custom styles/theme for app page
  tags$head(
    tags$style(HTML(" 
      body { 
          background-color: #F0FFFF;  /* Set background color of the body */
          font-family: 'Lucida Sans Typewriter', Monaco, monospace;  /* Set font family for the page */
      }
      .sidebar {
          background-color: #FEDE00;  /* Set background color for sidebar */
          padding: 20px;  /* Add padding inside the sidebar */
          border: 5px solid #000000;  /* Add border to sidebar */
          border-radius: 10px;  /* Round corners of the sidebar */
          font-size: 20px;  /* Set font size for sidebar text */
          font-weight: bold;  /* Make sidebar text bold */
      }
      .title {
          color: #FEDE00;  /* Set text color for title */
          font-size: 40px;  /* Set font size for title */
          font-weight: bold;  /* Make title bold */
          text-align: center;  /* Center-align the title text */
          border: 6px solid #E2B808;  /* Add border around the title */
          border-radius: 10px;  /* Round corners of the title */
          padding: 10px;  /* Add padding inside the title */
          background-color: #0A7029;  /* Set background color for the title */
          box-shadow: 2px 2px 8px rgba(0,0,0,0.3);  /* Add shadow to the title */
      }
      h3 {
          color: black;  /* Set text color for h3 elements */
          font-size: 20px;  /* Set font size for h3 elements */
          font-weight: bold;  /* Set text bold */
      }
      p {
          color: black;  /* Set text color for paragraphs */
          font-size: 20px;  /* Set font size for paragraphs */
          font-weight: bold;  /* Make paragraphs bold */
      }
      .action-button {
          background-color: #0A7029;  /* Set background color for action buttons */
          color: white;  /* Set text color for action buttons */
          border: 3px solid black;  /* Add border for action buttons */
          border-radius: 5px;  /* Round corners of action buttons */
          padding: 10px;  /* Add padding inside action buttons */
          font-size: 20px;  /* Set font size for action buttons */
          font-weight: bold;  /* Set text bold */
      }
    "))
  ),
  
  # Title displayed at the top of the app
  div(class = "title", 
      HTML('<img src="images/uealogo2.png" style="height: 10px; float: left; margin-right: 10px;">'),
      HTML("Speedy Skyscrapers<br>Does Age Effect Tower Building?"),
      HTML('<img src="images/logo_black_2.png" style="height: 10px; float: right; margin-left: 10px;">')
  ), br(), 
  
  # Define layout of the page with a sidebar and a main panel
  sidebarLayout(
    sidebarPanel(
      class = "sidebar",
      width = 3,  # Sidebar occupies 2 columns (20% of the page width)
      sliderInput("blocks", "Number of Blocks (HEIGHT)?", min = 1, max = 10, value = 1), 
      radioButtons("age", "Age", 
                   choices = c("<6" = "<6", 
                               "7" = "7", 
                               "8" = "8",
                               "9" = "9", 
                               "10" = "10",
                               "11" = "11", 
                               "12" = "12",
                               "13-19" = "13-19",
                               "20>" = "20>")),
      actionButton("add", "Plot Data"),
      br(), br()
    ),
    
    mainPanel(
      width = 9,  # Main panel occupies 8 columns (70% of the page width)
      plotlyOutput("scatterPlot", height = "600px", width = "100%")
    )
  ))

# Server logic to handle user inputs and generate outputs
server_sss <- function(input, output, session) {
  # Define the path for saving the inputs as a CSV
  tower <- "data/sss2025_data_collection.csv" # Saturday = 191 entries
  #tower <- "data/nsf2025_data_collection_1.csv" # Sunday = 212 entries
  
  # Load existing data if it exists
  if (file.exists(tower)) {
    tower_data <- read.csv(tower)
  } else {
    tower_data <- data.frame(Age = character(), Blocks = numeric(), Color = character())
  }
  
  # Create a reactive dataframe to store user inputs
  data <- reactiveVal(tower_data)
  
  # Update the dataframe when the action button is clicked
  observeEvent(input$add, {
    new_row <- data.frame(Age = input$age, Blocks = input$blocks, stringsAsFactors = FALSE)
    updated_data <- rbind(data(), new_row)
    data(updated_data)
    write.csv(updated_data, tower, row.names = FALSE)
  })
  
  # Generate and render the scatter plot when the data changes
  output$scatterPlot <- renderPlotly({
    # Retrieve the current data
    plot_data <- data()
    
    # Define the levels and order for Age
    plot_data$Age <- factor(plot_data$Age, levels = c(
      "<6", "7", "8", "9", "10", "11", "12", "13-19", "20>"
    ))
    
    # Create the ggplot scatter plot
    p <- ggplot(plot_data, aes(y = Blocks, 
                               x = Age, 
                               color = Age, 
                               text = paste("<br>Age:", Age, "<br>Blocks:", Blocks))) +
      geom_jitter(size = 6) +
      scale_color_discrete() + 
      theme_minimal() + 
      labs(y = "Number of Blocks (HEIGHT)", x = "Age") + 
      scale_y_continuous(limits = c(0, 10), breaks = 0:10) + 
      scale_x_discrete(labels = c("<6" = "<6", 
                                  "7" = "7", 
                                  "8" = "8", 
                                  "9" = "9", 
                                  "10" = "10", 
                                  "11" = "11", 
                                  "12" = "12", 
                                  "13-19" = "13-19", 
                                  "20>" = "20>")
                       ) + # Rename x-axis labels
      
      theme(plot.title = element_text(face = "bold", size = 20, color = "#000000"), # Customize plot title style
            axis.title = element_text(face = "bold", size = 16), # Customize axis title style
            axis.text.x = element_text(face = "bold"), # Customize x-axis text style
            axis.text.y = element_text(face = "bold"), # Customize y-axis text style
            legend.position = "none", # Hide legend
            panel.background = element_rect(fill = "#F0FFFF"), # Set panel background color
            plot.background = element_rect(fill = "#F0FFFF"), # Set overall plot background color
            panel.grid.major = element_line(color = "#000000"), # Customize major grid lines
            panel.grid.minor = element_line(color = "#000000")) # Customize minor grid lines
    
    # Convert the ggplot to a Plotly object for interactivity and set custom tooltips
    ggplotly(p, tooltip = "text") %>%
      layout(autosize = TRUE) # Enable autosize
  })
}

# Run the Shiny app
shinyApp(ui = sss25, server = server_sss)
```